// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.IoT.DeviceUpdate
{
    public partial class InlineStep
    {
        internal static InlineStep DeserializeInlineStep(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string handler = default;
            Optional<IReadOnlyDictionary<string, BinaryData>> handlerProperties = default;
            IReadOnlyList<string> files = default;
            StepType type = default;
            Optional<string> description = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("handler"u8))
                {
                    handler = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("handlerProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, BinaryData> dictionary = new Dictionary<string, BinaryData>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, BinaryData.FromString(property0.Value.GetRawText()));
                        }
                    }
                    handlerProperties = dictionary;
                    continue;
                }
                if (property.NameEquals("files"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    files = array;
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new StepType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
            }
            return new InlineStep(type, description.Value, handler, Optional.ToDictionary(handlerProperties), files);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new InlineStep FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeInlineStep(document.RootElement);
        }
    }
}
