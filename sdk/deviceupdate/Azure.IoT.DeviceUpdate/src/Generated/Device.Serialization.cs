// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.IoT.DeviceUpdate
{
    public partial class Device
    {
        internal static Device DeserializeDevice(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string deviceId = default;
            Optional<string> moduleId = default;
            string deviceClassId = default;
            Optional<string> groupId = default;
            Optional<UpdateInfo> lastAttemptedUpdate = default;
            Optional<DeviceDeploymentState> deploymentStatus = default;
            Optional<UpdateInfo> installedUpdate = default;
            bool onLatestUpdate = default;
            Optional<string> lastDeploymentId = default;
            Optional<InstallResult> lastInstallResult = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deviceId"u8))
                {
                    deviceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("moduleId"u8))
                {
                    moduleId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deviceClassId"u8))
                {
                    deviceClassId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groupId"u8))
                {
                    groupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastAttemptedUpdate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastAttemptedUpdate = UpdateInfo.DeserializeUpdateInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("deploymentStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deploymentStatus = new DeviceDeploymentState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("installedUpdate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    installedUpdate = UpdateInfo.DeserializeUpdateInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("onLatestUpdate"u8))
                {
                    onLatestUpdate = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("lastDeploymentId"u8))
                {
                    lastDeploymentId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastInstallResult"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastInstallResult = InstallResult.DeserializeInstallResult(property.Value);
                    continue;
                }
            }
            return new Device(deviceId, moduleId.Value, deviceClassId, groupId.Value, lastAttemptedUpdate.Value, Optional.ToNullable(deploymentStatus), installedUpdate.Value, onLatestUpdate, lastDeploymentId.Value, lastInstallResult.Value);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static Device FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeDevice(document.RootElement);
        }
    }
}
