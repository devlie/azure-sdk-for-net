<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetUpdateAsync(string,string,string,ETag?,CancellationToken)">
      <example>
This sample shows how to call GetUpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response<Update> response = await client.GetUpdateAsync("<provider>", "<name>", "<version>");
]]></code>
This sample shows how to call GetUpdateAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response<Update> response = await client.GetUpdateAsync("<provider>", "<name>", "<version>", ifNoneMatch: new ETag("<if-none-match>"));
]]></code></example>
    </member>
    <member name="GetUpdate(string,string,string,ETag?,CancellationToken)">
      <example>
This sample shows how to call GetUpdate.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response<Update> response = client.GetUpdate("<provider>", "<name>", "<version>");
]]></code>
This sample shows how to call GetUpdate with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response<Update> response = client.GetUpdate("<provider>", "<name>", "<version>", ifNoneMatch: new ETag("<if-none-match>"));
]]></code></example>
    </member>
    <member name="GetUpdateAsync(string,string,string,ETag?,RequestContext)">
      <example>
This sample shows how to call GetUpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = await client.GetUpdateAsync("<provider>", "<name>", "<version>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("manifestVersion").ToString());
Console.WriteLine(result.GetProperty("importedDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetUpdateAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = await client.GetUpdateAsync("<provider>", "<name>", "<version>", new ETag("<if-none-match>"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("isDeployable").ToString());
Console.WriteLine(result.GetProperty("updateType").ToString());
Console.WriteLine(result.GetProperty("installedCriteria").ToString());
Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("scanResult").ToString());
Console.WriteLine(result.GetProperty("manifestVersion").ToString());
Console.WriteLine(result.GetProperty("importedDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code></example>
    </member>
    <member name="GetUpdate(string,string,string,ETag?,RequestContext)">
      <example>
This sample shows how to call GetUpdate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = client.GetUpdate("<provider>", "<name>", "<version>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("manifestVersion").ToString());
Console.WriteLine(result.GetProperty("importedDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetUpdate with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = client.GetUpdate("<provider>", "<name>", "<version>", new ETag("<if-none-match>"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("isDeployable").ToString());
Console.WriteLine(result.GetProperty("updateType").ToString());
Console.WriteLine(result.GetProperty("installedCriteria").ToString());
Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("scanResult").ToString());
Console.WriteLine(result.GetProperty("manifestVersion").ToString());
Console.WriteLine(result.GetProperty("importedDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code></example>
    </member>
    <member name="GetFileAsync(string,string,string,string,ETag?,CancellationToken)">
      <example>
This sample shows how to call GetFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response<UpdateFile> response = await client.GetFileAsync("<provider>", "<name>", "<version>", "<fileId>");
]]></code>
This sample shows how to call GetFileAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response<UpdateFile> response = await client.GetFileAsync("<provider>", "<name>", "<version>", "<fileId>", ifNoneMatch: new ETag("<if-none-match>"));
]]></code></example>
    </member>
    <member name="GetFile(string,string,string,string,ETag?,CancellationToken)">
      <example>
This sample shows how to call GetFile.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response<UpdateFile> response = client.GetFile("<provider>", "<name>", "<version>", "<fileId>");
]]></code>
This sample shows how to call GetFile with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response<UpdateFile> response = client.GetFile("<provider>", "<name>", "<version>", "<fileId>", ifNoneMatch: new ETag("<if-none-match>"));
]]></code></example>
    </member>
    <member name="GetFileAsync(string,string,string,string,ETag?,RequestContext)">
      <example>
This sample shows how to call GetFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = await client.GetFileAsync("<provider>", "<name>", "<version>", "<fileId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fileName").ToString());
Console.WriteLine(result.GetProperty("sizeInBytes").ToString());
Console.WriteLine(result.GetProperty("hashes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("fileId").ToString());
]]></code>
This sample shows how to call GetFileAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = await client.GetFileAsync("<provider>", "<name>", "<version>", "<fileId>", new ETag("<if-none-match>"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fileName").ToString());
Console.WriteLine(result.GetProperty("sizeInBytes").ToString());
Console.WriteLine(result.GetProperty("hashes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("mimeType").ToString());
Console.WriteLine(result.GetProperty("scanResult").ToString());
Console.WriteLine(result.GetProperty("scanDetails").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("fileName").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("sizeInBytes").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("hashes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("mimeType").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("scanResult").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("scanDetails").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("downloadHandler").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code></example>
    </member>
    <member name="GetFile(string,string,string,string,ETag?,RequestContext)">
      <example>
This sample shows how to call GetFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = client.GetFile("<provider>", "<name>", "<version>", "<fileId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fileName").ToString());
Console.WriteLine(result.GetProperty("sizeInBytes").ToString());
Console.WriteLine(result.GetProperty("hashes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("fileId").ToString());
]]></code>
This sample shows how to call GetFile with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = client.GetFile("<provider>", "<name>", "<version>", "<fileId>", new ETag("<if-none-match>"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fileName").ToString());
Console.WriteLine(result.GetProperty("sizeInBytes").ToString());
Console.WriteLine(result.GetProperty("hashes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("mimeType").ToString());
Console.WriteLine(result.GetProperty("scanResult").ToString());
Console.WriteLine(result.GetProperty("scanDetails").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("fileName").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("sizeInBytes").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("hashes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("mimeType").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("scanResult").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("scanDetails").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("properties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("downloadHandler").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code></example>
    </member>
    <member name="GetUpdatesAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetUpdatesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (Update item in client.GetUpdatesAsync())
{
}
]]></code>
This sample shows how to call GetUpdatesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (Update item in client.GetUpdatesAsync(search: "<search>", filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetUpdates(string,string,CancellationToken)">
      <example>
This sample shows how to call GetUpdates.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (Update item in client.GetUpdates())
{
}
]]></code>
This sample shows how to call GetUpdates with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (Update item in client.GetUpdates(search: "<search>", filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetUpdatesAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetUpdatesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetUpdatesAsync(null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("manifestVersion").ToString());
    Console.WriteLine(result.GetProperty("importedDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetUpdatesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetUpdatesAsync("<search>", "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("isDeployable").ToString());
    Console.WriteLine(result.GetProperty("updateType").ToString());
    Console.WriteLine(result.GetProperty("installedCriteria").ToString());
    Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("scanResult").ToString());
    Console.WriteLine(result.GetProperty("manifestVersion").ToString());
    Console.WriteLine(result.GetProperty("importedDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code></example>
    </member>
    <member name="GetUpdates(string,string,RequestContext)">
      <example>
This sample shows how to call GetUpdates and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetUpdates(null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("manifestVersion").ToString());
    Console.WriteLine(result.GetProperty("importedDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetUpdates with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetUpdates("<search>", "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("isDeployable").ToString());
    Console.WriteLine(result.GetProperty("updateType").ToString());
    Console.WriteLine(result.GetProperty("installedCriteria").ToString());
    Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("scanResult").ToString());
    Console.WriteLine(result.GetProperty("manifestVersion").ToString());
    Console.WriteLine(result.GetProperty("importedDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code></example>
    </member>
    <member name="GetProvidersAsync(CancellationToken)">
      <example>
This sample shows how to call GetProvidersAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (string item in client.GetProvidersAsync())
{
}
]]></code>
This sample shows how to call GetProvidersAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (string item in client.GetProvidersAsync())
{
}
]]></code></example>
    </member>
    <member name="GetProviders(CancellationToken)">
      <example>
This sample shows how to call GetProviders.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (string item in client.GetProviders())
{
}
]]></code>
This sample shows how to call GetProviders with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (string item in client.GetProviders())
{
}
]]></code></example>
    </member>
    <member name="GetProvidersAsync(RequestContext)">
      <example>
This sample shows how to call GetProvidersAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetProvidersAsync(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetProvidersAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetProvidersAsync(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
    </member>
    <member name="GetProviders(RequestContext)">
      <example>
This sample shows how to call GetProviders and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetProviders(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetProviders with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetProviders(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
    </member>
    <member name="GetNamesAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetNamesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (string item in client.GetNamesAsync("<provider>"))
{
}
]]></code>
This sample shows how to call GetNamesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (string item in client.GetNamesAsync("<provider>"))
{
}
]]></code></example>
    </member>
    <member name="GetNames(string,CancellationToken)">
      <example>
This sample shows how to call GetNames.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (string item in client.GetNames("<provider>"))
{
}
]]></code>
This sample shows how to call GetNames with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (string item in client.GetNames("<provider>"))
{
}
]]></code></example>
    </member>
    <member name="GetNamesAsync(string,RequestContext)">
      <example>
This sample shows how to call GetNamesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetNamesAsync("<provider>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetNamesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetNamesAsync("<provider>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
    </member>
    <member name="GetNames(string,RequestContext)">
      <example>
This sample shows how to call GetNames and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetNames("<provider>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetNames with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetNames("<provider>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
    </member>
    <member name="GetVersionsAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVersionsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (string item in client.GetVersionsAsync("<provider>", "<name>"))
{
}
]]></code>
This sample shows how to call GetVersionsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (string item in client.GetVersionsAsync("<provider>", "<name>", filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetVersions(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetVersions.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (string item in client.GetVersions("<provider>", "<name>"))
{
}
]]></code>
This sample shows how to call GetVersions with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (string item in client.GetVersions("<provider>", "<name>", filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetVersionsAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVersionsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetVersionsAsync("<provider>", "<name>", null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetVersionsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetVersionsAsync("<provider>", "<name>", "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
    </member>
    <member name="GetVersions(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetVersions and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetVersions("<provider>", "<name>", null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetVersions with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetVersions("<provider>", "<name>", "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
    </member>
    <member name="GetFilesAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (string item in client.GetFilesAsync("<provider>", "<name>", "<version>"))
{
}
]]></code>
This sample shows how to call GetFilesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (string item in client.GetFilesAsync("<provider>", "<name>", "<version>"))
{
}
]]></code></example>
    </member>
    <member name="GetFiles(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetFiles.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (string item in client.GetFiles("<provider>", "<name>", "<version>"))
{
}
]]></code>
This sample shows how to call GetFiles with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (string item in client.GetFiles("<provider>", "<name>", "<version>"))
{
}
]]></code></example>
    </member>
    <member name="GetFilesAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetFilesAsync("<provider>", "<name>", "<version>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetFilesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetFilesAsync("<provider>", "<name>", "<version>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
    </member>
    <member name="GetFiles(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetFiles("<provider>", "<name>", "<version>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetFiles with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetFiles("<provider>", "<name>", "<version>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
    </member>
    <member name="GetOperationStatusesAsync(string,int?,CancellationToken)">
      <example>
This sample shows how to call GetOperationStatusesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (UpdateOperation item in client.GetOperationStatusesAsync())
{
}
]]></code>
This sample shows how to call GetOperationStatusesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (UpdateOperation item in client.GetOperationStatusesAsync(filter: "<filter>", maxCount: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetOperationStatuses(string,int?,CancellationToken)">
      <example>
This sample shows how to call GetOperationStatuses.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (UpdateOperation item in client.GetOperationStatuses())
{
}
]]></code>
This sample shows how to call GetOperationStatuses with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (UpdateOperation item in client.GetOperationStatuses(filter: "<filter>", maxCount: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetOperationStatusesAsync(string,int?,RequestContext)">
      <example>
This sample shows how to call GetOperationStatusesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetOperationStatusesAsync(null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetOperationStatusesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetOperationStatusesAsync("<filter>", 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("resourceLocation").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("traceId").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code></example>
    </member>
    <member name="GetOperationStatuses(string,int?,RequestContext)">
      <example>
This sample shows how to call GetOperationStatuses and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetOperationStatuses(null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetOperationStatuses with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetOperationStatuses("<filter>", 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("resourceLocation").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("traceId").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code></example>
    </member>
    <member name="StartImportUpdateAsync(WaitUntil,IEnumerable{ImportUpdateInputItem},CancellationToken)">
      <example>
This sample shows how to call StartImportUpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Operation<UpdateOperation> operation = await client.StartImportUpdateAsync(WaitUntil.Completed, new ImportUpdateInputItem[]
{
    new ImportUpdateInputItem(new ImportManifestMetadata("<url>", 1234L, new Dictionary<string, string>
    {
        ["key"] = "<hashes>"
    }))
});
UpdateOperation responseData = operation.Value;
]]></code>
This sample shows how to call StartImportUpdateAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Operation<UpdateOperation> operation = await client.StartImportUpdateAsync(WaitUntil.Completed, new ImportUpdateInputItem[]
{
    new ImportUpdateInputItem(new ImportManifestMetadata("<url>", 1234L, new Dictionary<string, string>
    {
        ["key"] = "<hashes>"
    }))
    {
        FriendlyName = "<friendlyName>",
        Files = {new FileImportMetadata("<filename>", "<url>")},
    }
});
UpdateOperation responseData = operation.Value;
]]></code></example>
    </member>
    <member name="StartImportUpdate(WaitUntil,IEnumerable{ImportUpdateInputItem},CancellationToken)">
      <example>
This sample shows how to call StartImportUpdate.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Operation<UpdateOperation> operation = client.StartImportUpdate(WaitUntil.Completed, new ImportUpdateInputItem[]
{
    new ImportUpdateInputItem(new ImportManifestMetadata("<url>", 1234L, new Dictionary<string, string>
    {
        ["key"] = "<hashes>"
    }))
});
UpdateOperation responseData = operation.Value;
]]></code>
This sample shows how to call StartImportUpdate with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Operation<UpdateOperation> operation = client.StartImportUpdate(WaitUntil.Completed, new ImportUpdateInputItem[]
{
    new ImportUpdateInputItem(new ImportManifestMetadata("<url>", 1234L, new Dictionary<string, string>
    {
        ["key"] = "<hashes>"
    }))
    {
        FriendlyName = "<friendlyName>",
        Files = {new FileImportMetadata("<filename>", "<url>")},
    }
});
UpdateOperation responseData = operation.Value;
]]></code></example>
    </member>
    <member name="StartImportUpdateAsync(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call StartImportUpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        importManifest = new
        {
            url = "<url>",
            sizeInBytes = 1234L,
            hashes = new
            {
                key = "<hashes>",
            },
        },
    }
});
Operation<BinaryData> operation = await client.StartImportUpdateAsync(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call StartImportUpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        importManifest = new
        {
            url = "<url>",
            sizeInBytes = 1234L,
            hashes = new
            {
                key = "<hashes>",
            },
        },
        friendlyName = "<friendlyName>",
        files = new object[]
        {
            new
            {
                filename = "<filename>",
                url = "<url>",
            }
        },
    }
});
Operation<BinaryData> operation = await client.StartImportUpdateAsync(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("resourceLocation").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("traceId").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code></example>
    </member>
    <member name="StartImportUpdate(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call StartImportUpdate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        importManifest = new
        {
            url = "<url>",
            sizeInBytes = 1234L,
            hashes = new
            {
                key = "<hashes>",
            },
        },
    }
});
Operation<BinaryData> operation = client.StartImportUpdate(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call StartImportUpdate with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        importManifest = new
        {
            url = "<url>",
            sizeInBytes = 1234L,
            hashes = new
            {
                key = "<hashes>",
            },
        },
        friendlyName = "<friendlyName>",
        files = new object[]
        {
            new
            {
                filename = "<filename>",
                url = "<url>",
            }
        },
    }
});
Operation<BinaryData> operation = client.StartImportUpdate(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("resourceLocation").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("traceId").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code></example>
    </member>
    <member name="DeleteUpdateAsync(WaitUntil,string,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteUpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Operation operation = await client.DeleteUpdateAsync(WaitUntil.Completed, "<provider>", "<name>", "<version>");
]]></code>
This sample shows how to call DeleteUpdateAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Operation operation = await client.DeleteUpdateAsync(WaitUntil.Completed, "<provider>", "<name>", "<version>");
]]></code></example>
    </member>
    <member name="DeleteUpdate(WaitUntil,string,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteUpdate.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Operation operation = client.DeleteUpdate(WaitUntil.Completed, "<provider>", "<name>", "<version>");
]]></code>
This sample shows how to call DeleteUpdate with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceUpdateClient client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Operation operation = client.DeleteUpdate(WaitUntil.Completed, "<provider>", "<name>", "<version>");
]]></code></example>
    </member>
  </members>
</doc>