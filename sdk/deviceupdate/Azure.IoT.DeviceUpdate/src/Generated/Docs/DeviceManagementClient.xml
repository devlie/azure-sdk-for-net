<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetDeviceClassAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceClassAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClass> response = await client.GetDeviceClassAsync("<deviceClassId>");
]]></code>
This sample shows how to call GetDeviceClassAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClass> response = await client.GetDeviceClassAsync("<deviceClassId>");
]]></code></example>
    </member>
    <member name="GetDeviceClass(string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceClass.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClass> response = client.GetDeviceClass("<deviceClassId>");
]]></code>
This sample shows how to call GetDeviceClass with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClass> response = client.GetDeviceClass("<deviceClassId>");
]]></code></example>
    </member>
    <member name="GetDeviceClassAsync(string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceClassAsync("<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetDeviceClassAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceClassAsync("<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceClass(string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClass and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceClass("<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetDeviceClass with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceClass("<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
]]></code></example>
    </member>
    <member name="UpdateDeviceClassAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateDeviceClassAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateDeviceClassAsync("<deviceClassId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateDeviceClassAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    friendlyName = "<friendlyName>",
});
Response response = await client.UpdateDeviceClassAsync("<deviceClassId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
]]></code></example>
    </member>
    <member name="UpdateDeviceClass(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateDeviceClass and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateDeviceClass("<deviceClassId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateDeviceClass with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    friendlyName = "<friendlyName>",
});
Response response = client.UpdateDeviceClass("<deviceClassId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
]]></code></example>
    </member>
    <member name="DeleteDeviceClassAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteDeviceClassAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteDeviceClassAsync("<deviceClassId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeviceClassAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteDeviceClassAsync("<deviceClassId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteDeviceClass(string,RequestContext)">
      <example>
This sample shows how to call DeleteDeviceClass.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteDeviceClass("<deviceClassId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeviceClass with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteDeviceClass("<deviceClassId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetDeviceAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Device> response = await client.GetDeviceAsync("<deviceId>");
]]></code>
This sample shows how to call GetDeviceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Device> response = await client.GetDeviceAsync("<deviceId>");
]]></code></example>
    </member>
    <member name="GetDevice(string,CancellationToken)">
      <example>
This sample shows how to call GetDevice.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Device> response = client.GetDevice("<deviceId>");
]]></code>
This sample shows how to call GetDevice with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Device> response = client.GetDevice("<deviceId>");
]]></code></example>
    </member>
    <member name="GetDeviceAsync(string,RequestContext)">
      <example>
This sample shows how to call GetDeviceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceAsync("<deviceId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
]]></code>
This sample shows how to call GetDeviceAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceAsync("<deviceId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
]]></code></example>
    </member>
    <member name="GetDevice(string,RequestContext)">
      <example>
This sample shows how to call GetDevice and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDevice("<deviceId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
]]></code>
This sample shows how to call GetDevice with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDevice("<deviceId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceModuleAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceModuleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Device> response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>");
]]></code>
This sample shows how to call GetDeviceModuleAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Device> response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>");
]]></code></example>
    </member>
    <member name="GetDeviceModule(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceModule.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Device> response = client.GetDeviceModule("<deviceId>", "<moduleId>");
]]></code>
This sample shows how to call GetDeviceModule with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Device> response = client.GetDeviceModule("<deviceId>", "<moduleId>");
]]></code></example>
    </member>
    <member name="GetDeviceModuleAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceModuleAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
]]></code>
This sample shows how to call GetDeviceModuleAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceModule(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceModule and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceModule("<deviceId>", "<moduleId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
]]></code>
This sample shows how to call GetDeviceModule with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceModule("<deviceId>", "<moduleId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
]]></code></example>
    </member>
    <member name="GetUpdateComplianceAsync(CancellationToken)">
      <example>
This sample shows how to call GetUpdateComplianceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<UpdateCompliance> response = await client.GetUpdateComplianceAsync();
]]></code>
This sample shows how to call GetUpdateComplianceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<UpdateCompliance> response = await client.GetUpdateComplianceAsync();
]]></code></example>
    </member>
    <member name="GetUpdateCompliance(CancellationToken)">
      <example>
This sample shows how to call GetUpdateCompliance.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<UpdateCompliance> response = client.GetUpdateCompliance();
]]></code>
This sample shows how to call GetUpdateCompliance with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<UpdateCompliance> response = client.GetUpdateCompliance();
]]></code></example>
    </member>
    <member name="GetUpdateComplianceAsync(RequestContext)">
      <example>
This sample shows how to call GetUpdateComplianceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetUpdateComplianceAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
This sample shows how to call GetUpdateComplianceAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetUpdateComplianceAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetUpdateCompliance(RequestContext)">
      <example>
This sample shows how to call GetUpdateCompliance and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetUpdateCompliance(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
This sample shows how to call GetUpdateCompliance with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetUpdateCompliance(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetGroupAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Group> response = await client.GetGroupAsync("<groupId>");
]]></code>
This sample shows how to call GetGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Group> response = await client.GetGroupAsync("<groupId>");
]]></code></example>
    </member>
    <member name="GetGroup(string,CancellationToken)">
      <example>
This sample shows how to call GetGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Group> response = client.GetGroup("<groupId>");
]]></code>
This sample shows how to call GetGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Group> response = client.GetGroup("<groupId>");
]]></code></example>
    </member>
    <member name="GetGroupAsync(string,RequestContext)">
      <example>
This sample shows how to call GetGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetGroupAsync("<groupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupType").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetGroupAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetGroupAsync("<groupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupType").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
Console.WriteLine(result.GetProperty("deployments")[0].ToString());
]]></code></example>
    </member>
    <member name="GetGroup(string,RequestContext)">
      <example>
This sample shows how to call GetGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetGroup("<groupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupType").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetGroup with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetGroup("<groupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupType").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
Console.WriteLine(result.GetProperty("deployments")[0].ToString());
]]></code></example>
    </member>
    <member name="DeleteGroupAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteGroupAsync("<groupId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteGroupAsync("<groupId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteGroup(string,RequestContext)">
      <example>
This sample shows how to call DeleteGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteGroup("<groupId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteGroup("<groupId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetUpdateComplianceForGroupAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetUpdateComplianceForGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<UpdateCompliance> response = await client.GetUpdateComplianceForGroupAsync("<groupId>");
]]></code>
This sample shows how to call GetUpdateComplianceForGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<UpdateCompliance> response = await client.GetUpdateComplianceForGroupAsync("<groupId>");
]]></code></example>
    </member>
    <member name="GetUpdateComplianceForGroup(string,CancellationToken)">
      <example>
This sample shows how to call GetUpdateComplianceForGroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<UpdateCompliance> response = client.GetUpdateComplianceForGroup("<groupId>");
]]></code>
This sample shows how to call GetUpdateComplianceForGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<UpdateCompliance> response = client.GetUpdateComplianceForGroup("<groupId>");
]]></code></example>
    </member>
    <member name="GetUpdateComplianceForGroupAsync(string,RequestContext)">
      <example>
This sample shows how to call GetUpdateComplianceForGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetUpdateComplianceForGroupAsync("<groupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
This sample shows how to call GetUpdateComplianceForGroupAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetUpdateComplianceForGroupAsync("<groupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetUpdateComplianceForGroup(string,RequestContext)">
      <example>
This sample shows how to call GetUpdateComplianceForGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetUpdateComplianceForGroup("<groupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
This sample shows how to call GetUpdateComplianceForGroup with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetUpdateComplianceForGroup("<groupId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Deployment> response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>");
]]></code>
This sample shows how to call GetDeploymentAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Deployment> response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>");
]]></code></example>
    </member>
    <member name="GetDeployment(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeployment.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Deployment> response = client.GetDeployment("<groupId>", "<deploymentId>");
]]></code>
This sample shows how to call GetDeployment with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<Deployment> response = client.GetDeployment("<groupId>", "<deploymentId>");
]]></code></example>
    </member>
    <member name="GetDeploymentAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call GetDeploymentAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="GetDeployment(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeployment and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeployment("<groupId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call GetDeployment with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeployment("<groupId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateDeploymentAsync(string,string,Deployment,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdateDeploymentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Deployment resource = new Deployment("<deploymentId>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new UpdateInfo(), "<groupId>");
Response<Deployment> response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", resource);
]]></code>
This sample shows how to call CreateOrUpdateDeploymentAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Deployment resource = new Deployment("<deploymentId>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new UpdateInfo(), "<groupId>")
{
    RollbackPolicy = new CloudInitiatedRollbackPolicy(default, new CloudInitiatedRollbackPolicyFailure(1234, 1234)),
};
Response<Deployment> response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", resource);
]]></code></example>
    </member>
    <member name="CreateOrUpdateDeployment(string,string,Deployment,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdateDeployment.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Deployment resource = new Deployment("<deploymentId>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new UpdateInfo(), "<groupId>");
Response<Deployment> response = client.CreateOrUpdateDeployment("<groupId>", "<deploymentId>", resource);
]]></code>
This sample shows how to call CreateOrUpdateDeployment with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Deployment resource = new Deployment("<deploymentId>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new UpdateInfo(), "<groupId>")
{
    RollbackPolicy = new CloudInitiatedRollbackPolicy(default, new CloudInitiatedRollbackPolicyFailure(1234, 1234)),
};
Response<Deployment> response = client.CreateOrUpdateDeployment("<groupId>", "<deploymentId>", resource);
]]></code></example>
    </member>
    <member name="CreateOrUpdateDeploymentAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateDeploymentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    deploymentId = "<deploymentId>",
    startDateTime = "2022-05-10T14:57:31.2311892-04:00",
    update = new object(),
    groupId = "<groupId>",
});
Response response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call CreateOrUpdateDeploymentAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    deploymentId = "<deploymentId>",
    startDateTime = "2022-05-10T14:57:31.2311892-04:00",
    update = new object(),
    groupId = "<groupId>",
    rollbackPolicy = new
    {
        failure = new
        {
            devicesFailedPercentage = 1234,
            devicesFailedCount = 1234,
        },
    },
});
Response response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateDeployment(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateDeployment and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    deploymentId = "<deploymentId>",
    startDateTime = "2022-05-10T14:57:31.2311892-04:00",
    update = new object(),
    groupId = "<groupId>",
});
Response response = client.CreateOrUpdateDeployment("<groupId>", "<deploymentId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call CreateOrUpdateDeployment with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    deploymentId = "<deploymentId>",
    startDateTime = "2022-05-10T14:57:31.2311892-04:00",
    update = new object(),
    groupId = "<groupId>",
    rollbackPolicy = new
    {
        failure = new
        {
            devicesFailedPercentage = 1234,
            devicesFailedCount = 1234,
        },
    },
});
Response response = client.CreateOrUpdateDeployment("<groupId>", "<deploymentId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="DeleteDeploymentAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeploymentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteDeploymentAsync("<groupId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeploymentAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteDeploymentAsync("<groupId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteDeployment(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeployment.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteDeployment("<groupId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeployment with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteDeployment("<groupId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetDeploymentStatusAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeploymentStatus> response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>");
]]></code>
This sample shows how to call GetDeploymentStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeploymentStatus> response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>");
]]></code></example>
    </member>
    <member name="GetDeploymentStatus(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeploymentStatus> response = client.GetDeploymentStatus("<groupId>", "<deploymentId>");
]]></code>
This sample shows how to call GetDeploymentStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeploymentStatus> response = client.GetDeploymentStatus("<groupId>", "<deploymentId>");
]]></code></example>
    </member>
    <member name="GetDeploymentStatusAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
]]></code>
This sample shows how to call GetDeploymentStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("totalDevices").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedFailedCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedSucceededCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCanceledCount").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentStatus(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeploymentStatus("<groupId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
]]></code>
This sample shows how to call GetDeploymentStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeploymentStatus("<groupId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("totalDevices").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedFailedCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedSucceededCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCanceledCount").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceClassSubgroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroup> response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
]]></code>
This sample shows how to call GetDeviceClassSubgroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroup> response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroup(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceClassSubgroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroup> response = client.GetDeviceClassSubgroup("<groupId>", "<deviceClassId>");
]]></code>
This sample shows how to call GetDeviceClassSubgroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroup> response = client.GetDeviceClassSubgroup("<groupId>", "<deviceClassId>");
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetDeviceClassSubgroupAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
Console.WriteLine(result.GetProperty("deploymentId").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroup(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceClassSubgroup("<groupId>", "<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetDeviceClassSubgroup with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceClassSubgroup("<groupId>", "<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
Console.WriteLine(result.GetProperty("deploymentId").ToString());
]]></code></example>
    </member>
    <member name="DeleteDeviceClassSubgroupAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeviceClassSubgroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeviceClassSubgroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteDeviceClassSubgroup(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeviceClassSubgroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteDeviceClassSubgroup("<groupId>", "<deviceClassId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeviceClassSubgroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteDeviceClassSubgroup("<groupId>", "<deviceClassId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupUpdateComplianceAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceClassSubgroupUpdateComplianceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<UpdateCompliance> response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>");
]]></code>
This sample shows how to call GetDeviceClassSubgroupUpdateComplianceAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<UpdateCompliance> response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>");
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupUpdateCompliance(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceClassSubgroupUpdateCompliance.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<UpdateCompliance> response = client.GetDeviceClassSubgroupUpdateCompliance("<groupId>", "<deviceClassId>");
]]></code>
This sample shows how to call GetDeviceClassSubgroupUpdateCompliance with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<UpdateCompliance> response = client.GetDeviceClassSubgroupUpdateCompliance("<groupId>", "<deviceClassId>");
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupUpdateComplianceAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroupUpdateComplianceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
This sample shows how to call GetDeviceClassSubgroupUpdateComplianceAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupUpdateCompliance(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroupUpdateCompliance and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceClassSubgroupUpdateCompliance("<groupId>", "<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
This sample shows how to call GetDeviceClassSubgroupUpdateCompliance with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceClassSubgroupUpdateCompliance("<groupId>", "<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetBestUpdatesForDeviceClassSubgroupAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetBestUpdatesForDeviceClassSubgroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupUpdatableDevices> response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
]]></code>
This sample shows how to call GetBestUpdatesForDeviceClassSubgroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupUpdatableDevices> response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
]]></code></example>
    </member>
    <member name="GetBestUpdatesForDeviceClassSubgroup(string,string,CancellationToken)">
      <example>
This sample shows how to call GetBestUpdatesForDeviceClassSubgroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupUpdatableDevices> response = client.GetBestUpdatesForDeviceClassSubgroup("<groupId>", "<deviceClassId>");
]]></code>
This sample shows how to call GetBestUpdatesForDeviceClassSubgroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupUpdatableDevices> response = client.GetBestUpdatesForDeviceClassSubgroup("<groupId>", "<deviceClassId>");
]]></code></example>
    </member>
    <member name="GetBestUpdatesForDeviceClassSubgroupAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetBestUpdatesForDeviceClassSubgroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
]]></code>
This sample shows how to call GetBestUpdatesForDeviceClassSubgroupAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetBestUpdatesForDeviceClassSubgroup(string,string,RequestContext)">
      <example>
This sample shows how to call GetBestUpdatesForDeviceClassSubgroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetBestUpdatesForDeviceClassSubgroup("<groupId>", "<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
]]></code>
This sample shows how to call GetBestUpdatesForDeviceClassSubgroup with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetBestUpdatesForDeviceClassSubgroup("<groupId>", "<deviceClassId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentForDeviceClassSubgroupAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentForDeviceClassSubgroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeployment> response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code>
This sample shows how to call GetDeploymentForDeviceClassSubgroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeployment> response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code></example>
    </member>
    <member name="GetDeploymentForDeviceClassSubgroup(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentForDeviceClassSubgroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeployment> response = client.GetDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code>
This sample shows how to call GetDeploymentForDeviceClassSubgroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeployment> response = client.GetDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code></example>
    </member>
    <member name="GetDeploymentForDeviceClassSubgroupAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentForDeviceClassSubgroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call GetDeploymentForDeviceClassSubgroupAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentForDeviceClassSubgroup(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentForDeviceClassSubgroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call GetDeploymentForDeviceClassSubgroup with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="DeleteDeploymentForDeviceClassSubgroupAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeploymentForDeviceClassSubgroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeploymentForDeviceClassSubgroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteDeploymentForDeviceClassSubgroup(string,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeploymentForDeviceClassSubgroup.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeploymentForDeviceClassSubgroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="StopDeploymentAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call StopDeploymentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeployment> response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code>
This sample shows how to call StopDeploymentAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeployment> response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code></example>
    </member>
    <member name="StopDeployment(string,string,string,CancellationToken)">
      <example>
This sample shows how to call StopDeployment.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeployment> response = client.StopDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code>
This sample shows how to call StopDeployment with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeployment> response = client.StopDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code></example>
    </member>
    <member name="StopDeploymentAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call StopDeploymentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call StopDeploymentAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="StopDeployment(string,string,string,RequestContext)">
      <example>
This sample shows how to call StopDeployment and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.StopDeployment("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call StopDeployment with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.StopDeployment("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="RetryDeploymentAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call RetryDeploymentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeployment> response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code>
This sample shows how to call RetryDeploymentAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeployment> response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code></example>
    </member>
    <member name="RetryDeployment(string,string,string,CancellationToken)">
      <example>
This sample shows how to call RetryDeployment.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeployment> response = client.RetryDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code>
This sample shows how to call RetryDeployment with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeployment> response = client.RetryDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code></example>
    </member>
    <member name="RetryDeploymentAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call RetryDeploymentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call RetryDeploymentAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="RetryDeployment(string,string,string,RequestContext)">
      <example>
This sample shows how to call RetryDeployment and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.RetryDeployment("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call RetryDeployment with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.RetryDeployment("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupDeploymentStatusAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceClassSubgroupDeploymentStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeploymentStatus> response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code>
This sample shows how to call GetDeviceClassSubgroupDeploymentStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeploymentStatus> response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupDeploymentStatus(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceClassSubgroupDeploymentStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeploymentStatus> response = client.GetDeviceClassSubgroupDeploymentStatus("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code>
This sample shows how to call GetDeviceClassSubgroupDeploymentStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<DeviceClassSubgroupDeploymentStatus> response = client.GetDeviceClassSubgroupDeploymentStatus("<groupId>", "<deviceClassId>", "<deploymentId>");
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupDeploymentStatusAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroupDeploymentStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
]]></code>
This sample shows how to call GetDeviceClassSubgroupDeploymentStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("totalDevices").ToString());
Console.WriteLine(result.GetProperty("devicesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("devicesCompletedFailedCount").ToString());
Console.WriteLine(result.GetProperty("devicesCompletedSucceededCount").ToString());
Console.WriteLine(result.GetProperty("devicesCanceledCount").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupDeploymentStatus(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroupDeploymentStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceClassSubgroupDeploymentStatus("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
]]></code>
This sample shows how to call GetDeviceClassSubgroupDeploymentStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceClassSubgroupDeploymentStatus("<groupId>", "<deviceClassId>", "<deploymentId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("totalDevices").ToString());
Console.WriteLine(result.GetProperty("devicesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("devicesCompletedFailedCount").ToString());
Console.WriteLine(result.GetProperty("devicesCompletedSucceededCount").ToString());
Console.WriteLine(result.GetProperty("devicesCanceledCount").ToString());
]]></code></example>
    </member>
    <member name="GetLogCollectionAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetLogCollectionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<LogCollection> response = await client.GetLogCollectionAsync("<operationId>");
]]></code>
This sample shows how to call GetLogCollectionAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<LogCollection> response = await client.GetLogCollectionAsync("<operationId>");
]]></code></example>
    </member>
    <member name="GetLogCollection(string,CancellationToken)">
      <example>
This sample shows how to call GetLogCollection.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<LogCollection> response = client.GetLogCollection("<operationId>");
]]></code>
This sample shows how to call GetLogCollection with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response<LogCollection> response = client.GetLogCollection("<operationId>");
]]></code></example>
    </member>
    <member name="GetLogCollectionAsync(string,RequestContext)">
      <example>
This sample shows how to call GetLogCollectionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetLogCollectionAsync("<operationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
]]></code>
This sample shows how to call GetLogCollectionAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetLogCollectionAsync("<operationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
    </member>
    <member name="GetLogCollection(string,RequestContext)">
      <example>
This sample shows how to call GetLogCollection and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetLogCollection("<operationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
]]></code>
This sample shows how to call GetLogCollection with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetLogCollection("<operationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
    </member>
    <member name="StartLogCollectionAsync(string,LogCollection,CancellationToken)">
      <example>
This sample shows how to call StartLogCollectionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

LogCollection resource = new LogCollection("<operationId>", new DeviceUpdateAgentId[]
{
    new DeviceUpdateAgentId("<deviceId>")
});
Response<LogCollection> response = await client.StartLogCollectionAsync("<operationId>", resource);
]]></code>
This sample shows how to call StartLogCollectionAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

LogCollection resource = new LogCollection("<operationId>", new DeviceUpdateAgentId[]
{
    new DeviceUpdateAgentId("<deviceId>")
    {
        ModuleId = "<moduleId>",
    }
})
{
    Description = "<description>",
};
Response<LogCollection> response = await client.StartLogCollectionAsync("<operationId>", resource);
]]></code></example>
    </member>
    <member name="StartLogCollection(string,LogCollection,CancellationToken)">
      <example>
This sample shows how to call StartLogCollection.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

LogCollection resource = new LogCollection("<operationId>", new DeviceUpdateAgentId[]
{
    new DeviceUpdateAgentId("<deviceId>")
});
Response<LogCollection> response = client.StartLogCollection("<operationId>", resource);
]]></code>
This sample shows how to call StartLogCollection with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

LogCollection resource = new LogCollection("<operationId>", new DeviceUpdateAgentId[]
{
    new DeviceUpdateAgentId("<deviceId>")
    {
        ModuleId = "<moduleId>",
    }
})
{
    Description = "<description>",
};
Response<LogCollection> response = client.StartLogCollection("<operationId>", resource);
]]></code></example>
    </member>
    <member name="StartLogCollectionAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call StartLogCollectionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    operationId = "<operationId>",
    deviceList = new object[]
    {
        new
        {
            deviceId = "<deviceId>",
        }
    },
});
Response response = await client.StartLogCollectionAsync("<operationId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
]]></code>
This sample shows how to call StartLogCollectionAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    operationId = "<operationId>",
    deviceList = new object[]
    {
        new
        {
            deviceId = "<deviceId>",
            moduleId = "<moduleId>",
        }
    },
    description = "<description>",
});
Response response = await client.StartLogCollectionAsync("<operationId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
    </member>
    <member name="StartLogCollection(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call StartLogCollection and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    operationId = "<operationId>",
    deviceList = new object[]
    {
        new
        {
            deviceId = "<deviceId>",
        }
    },
});
Response response = client.StartLogCollection("<operationId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
]]></code>
This sample shows how to call StartLogCollection with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    operationId = "<operationId>",
    deviceList = new object[]
    {
        new
        {
            deviceId = "<deviceId>",
            moduleId = "<moduleId>",
        }
    },
    description = "<description>",
});
Response response = client.StartLogCollection("<operationId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceClassesAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceClassesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (DeviceClass item in client.GetDeviceClassesAsync())
{
}
]]></code>
This sample shows how to call GetDeviceClassesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (DeviceClass item in client.GetDeviceClassesAsync(filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetDeviceClasses(string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceClasses.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (DeviceClass item in client.GetDeviceClasses())
{
}
]]></code>
This sample shows how to call GetDeviceClasses with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (DeviceClass item in client.GetDeviceClasses(filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetDeviceClassesAsync(string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetDeviceClassesAsync(null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
}
]]></code>
This sample shows how to call GetDeviceClassesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetDeviceClassesAsync("<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeviceClasses(string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClasses and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetDeviceClasses(null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
}
]]></code>
This sample shows how to call GetDeviceClasses with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetDeviceClasses("<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
}
]]></code></example>
    </member>
    <member name="GetInstallableUpdatesForDeviceClassesAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetInstallableUpdatesForDeviceClassesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (UpdateInfo item in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>"))
{
}
]]></code>
This sample shows how to call GetInstallableUpdatesForDeviceClassesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (UpdateInfo item in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>"))
{
}
]]></code></example>
    </member>
    <member name="GetInstallableUpdatesForDeviceClasses(string,CancellationToken)">
      <example>
This sample shows how to call GetInstallableUpdatesForDeviceClasses.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (UpdateInfo item in client.GetInstallableUpdatesForDeviceClasses("<deviceClassId>"))
{
}
]]></code>
This sample shows how to call GetInstallableUpdatesForDeviceClasses with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (UpdateInfo item in client.GetInstallableUpdatesForDeviceClasses("<deviceClassId>"))
{
}
]]></code></example>
    </member>
    <member name="GetInstallableUpdatesForDeviceClassesAsync(string,RequestContext)">
      <example>
This sample shows how to call GetInstallableUpdatesForDeviceClassesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
}
]]></code>
This sample shows how to call GetInstallableUpdatesForDeviceClassesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
}
]]></code></example>
    </member>
    <member name="GetInstallableUpdatesForDeviceClasses(string,RequestContext)">
      <example>
This sample shows how to call GetInstallableUpdatesForDeviceClasses and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetInstallableUpdatesForDeviceClasses("<deviceClassId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
}
]]></code>
This sample shows how to call GetInstallableUpdatesForDeviceClasses with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetInstallableUpdatesForDeviceClasses("<deviceClassId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
}
]]></code></example>
    </member>
    <member name="GetDevicesAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetDevicesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (Device item in client.GetDevicesAsync())
{
}
]]></code>
This sample shows how to call GetDevicesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (Device item in client.GetDevicesAsync(filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetDevices(string,CancellationToken)">
      <example>
This sample shows how to call GetDevices.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (Device item in client.GetDevices())
{
}
]]></code>
This sample shows how to call GetDevices with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (Device item in client.GetDevices(filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetDevicesAsync(string,RequestContext)">
      <example>
This sample shows how to call GetDevicesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetDevicesAsync(null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
}
]]></code>
This sample shows how to call GetDevicesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetDevicesAsync("<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
    Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
}
]]></code></example>
    </member>
    <member name="GetDevices(string,RequestContext)">
      <example>
This sample shows how to call GetDevices and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetDevices(null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
}
]]></code>
This sample shows how to call GetDevices with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetDevices("<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
    Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
}
]]></code></example>
    </member>
    <member name="GetGroupsAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetGroupsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (Group item in client.GetGroupsAsync())
{
}
]]></code>
This sample shows how to call GetGroupsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (Group item in client.GetGroupsAsync(orderby: "<orderby>"))
{
}
]]></code></example>
    </member>
    <member name="GetGroups(string,CancellationToken)">
      <example>
This sample shows how to call GetGroups.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (Group item in client.GetGroups())
{
}
]]></code>
This sample shows how to call GetGroups with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (Group item in client.GetGroups(orderby: "<orderby>"))
{
}
]]></code></example>
    </member>
    <member name="GetGroupsAsync(string,RequestContext)">
      <example>
This sample shows how to call GetGroupsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetGroupsAsync(null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupType").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetGroupsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetGroupsAsync("<orderby>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupType").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
    Console.WriteLine(result.GetProperty("deployments")[0].ToString());
}
]]></code></example>
    </member>
    <member name="GetGroups(string,RequestContext)">
      <example>
This sample shows how to call GetGroups and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetGroups(null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupType").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetGroups with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetGroups("<orderby>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupType").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
    Console.WriteLine(result.GetProperty("deployments")[0].ToString());
}
]]></code></example>
    </member>
    <member name="GetBestUpdatesForGroupsAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetBestUpdatesForGroupsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (DeviceClassSubgroupUpdatableDevices item in client.GetBestUpdatesForGroupsAsync("<groupId>"))
{
}
]]></code>
This sample shows how to call GetBestUpdatesForGroupsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (DeviceClassSubgroupUpdatableDevices item in client.GetBestUpdatesForGroupsAsync("<groupId>"))
{
}
]]></code></example>
    </member>
    <member name="GetBestUpdatesForGroups(string,CancellationToken)">
      <example>
This sample shows how to call GetBestUpdatesForGroups.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (DeviceClassSubgroupUpdatableDevices item in client.GetBestUpdatesForGroups("<groupId>"))
{
}
]]></code>
This sample shows how to call GetBestUpdatesForGroups with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (DeviceClassSubgroupUpdatableDevices item in client.GetBestUpdatesForGroups("<groupId>"))
{
}
]]></code></example>
    </member>
    <member name="GetBestUpdatesForGroupsAsync(string,RequestContext)">
      <example>
This sample shows how to call GetBestUpdatesForGroupsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetBestUpdatesForGroupsAsync("<groupId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
}
]]></code>
This sample shows how to call GetBestUpdatesForGroupsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetBestUpdatesForGroupsAsync("<groupId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
}
]]></code></example>
    </member>
    <member name="GetBestUpdatesForGroups(string,RequestContext)">
      <example>
This sample shows how to call GetBestUpdatesForGroups and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetBestUpdatesForGroups("<groupId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
}
]]></code>
This sample shows how to call GetBestUpdatesForGroups with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetBestUpdatesForGroups("<groupId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeploymentsForGroupsAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentsForGroupsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (Deployment item in client.GetDeploymentsForGroupsAsync("<groupId>"))
{
}
]]></code>
This sample shows how to call GetDeploymentsForGroupsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (Deployment item in client.GetDeploymentsForGroupsAsync("<groupId>", orderby: "<orderby>"))
{
}
]]></code></example>
    </member>
    <member name="GetDeploymentsForGroups(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentsForGroups.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (Deployment item in client.GetDeploymentsForGroups("<groupId>"))
{
}
]]></code>
This sample shows how to call GetDeploymentsForGroups with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (Deployment item in client.GetDeploymentsForGroups("<groupId>", orderby: "<orderby>"))
{
}
]]></code></example>
    </member>
    <member name="GetDeploymentsForGroupsAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentsForGroupsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetDeploymentsForGroupsAsync("<groupId>", null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
}
]]></code>
This sample shows how to call GetDeploymentsForGroupsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetDeploymentsForGroupsAsync("<groupId>", "<orderby>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
    Console.WriteLine(result.GetProperty("isCanceled").ToString());
    Console.WriteLine(result.GetProperty("isRetried").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
    Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeploymentsForGroups(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentsForGroups and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetDeploymentsForGroups("<groupId>", null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
}
]]></code>
This sample shows how to call GetDeploymentsForGroups with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetDeploymentsForGroups("<groupId>", "<orderby>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
    Console.WriteLine(result.GetProperty("isCanceled").ToString());
    Console.WriteLine(result.GetProperty("isRetried").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
    Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupsForGroupsAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceClassSubgroupsForGroupsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (DeviceClassSubgroup item in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>"))
{
}
]]></code>
This sample shows how to call GetDeviceClassSubgroupsForGroupsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (DeviceClassSubgroup item in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>", filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupsForGroups(string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceClassSubgroupsForGroups.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (DeviceClassSubgroup item in client.GetDeviceClassSubgroupsForGroups("<groupId>"))
{
}
]]></code>
This sample shows how to call GetDeviceClassSubgroupsForGroups with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (DeviceClassSubgroup item in client.GetDeviceClassSubgroupsForGroups("<groupId>", filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupsForGroupsAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroupsForGroupsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>", null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetDeviceClassSubgroupsForGroupsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>", "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupsForGroups(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroupsForGroups and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetDeviceClassSubgroupsForGroups("<groupId>", null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetDeviceClassSubgroupsForGroups with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetDeviceClassSubgroupsForGroups("<groupId>", "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeploymentsForDeviceClassSubgroupsAsync(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentsForDeviceClassSubgroupsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (DeviceClassSubgroupDeployment item in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>"))
{
}
]]></code>
This sample shows how to call GetDeploymentsForDeviceClassSubgroupsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (DeviceClassSubgroupDeployment item in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>", orderby: "<orderby>"))
{
}
]]></code></example>
    </member>
    <member name="GetDeploymentsForDeviceClassSubgroups(string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeploymentsForDeviceClassSubgroups.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (DeviceClassSubgroupDeployment item in client.GetDeploymentsForDeviceClassSubgroups("<groupId>", "<deviceClassId>"))
{
}
]]></code>
This sample shows how to call GetDeploymentsForDeviceClassSubgroups with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (DeviceClassSubgroupDeployment item in client.GetDeploymentsForDeviceClassSubgroups("<groupId>", "<deviceClassId>", orderby: "<orderby>"))
{
}
]]></code></example>
    </member>
    <member name="GetDeploymentsForDeviceClassSubgroupsAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentsForDeviceClassSubgroupsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>", null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
}
]]></code>
This sample shows how to call GetDeploymentsForDeviceClassSubgroupsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>", "<orderby>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
    Console.WriteLine(result.GetProperty("isCanceled").ToString());
    Console.WriteLine(result.GetProperty("isRetried").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
    Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeploymentsForDeviceClassSubgroups(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentsForDeviceClassSubgroups and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetDeploymentsForDeviceClassSubgroups("<groupId>", "<deviceClassId>", null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
}
]]></code>
This sample shows how to call GetDeploymentsForDeviceClassSubgroups with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetDeploymentsForDeviceClassSubgroups("<groupId>", "<deviceClassId>", "<orderby>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
    Console.WriteLine(result.GetProperty("isCanceled").ToString());
    Console.WriteLine(result.GetProperty("isRetried").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
    Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync(string,string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (DeploymentDeviceState item in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>"))
{
}
]]></code>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (DeploymentDeviceState item in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>", filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetDeviceStatesForDeviceClassSubgroupDeployments(string,string,string,string,CancellationToken)">
      <example>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeployments.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (DeploymentDeviceState item in client.GetDeviceStatesForDeviceClassSubgroupDeployments("<groupId>", "<deviceClassId>", "<deploymentId>"))
{
}
]]></code>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeployments with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (DeploymentDeviceState item in client.GetDeviceStatesForDeviceClassSubgroupDeployments("<groupId>", "<deviceClassId>", "<deploymentId>", filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync(string,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("retryCount").ToString());
    Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
    Console.WriteLine(result.GetProperty("deviceState").ToString());
}
]]></code>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>", "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("retryCount").ToString());
    Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
    Console.WriteLine(result.GetProperty("deviceState").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeviceStatesForDeviceClassSubgroupDeployments(string,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeployments and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetDeviceStatesForDeviceClassSubgroupDeployments("<groupId>", "<deviceClassId>", "<deploymentId>", null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("retryCount").ToString());
    Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
    Console.WriteLine(result.GetProperty("deviceState").ToString());
}
]]></code>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeployments with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetDeviceStatesForDeviceClassSubgroupDeployments("<groupId>", "<deviceClassId>", "<deploymentId>", "<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("retryCount").ToString());
    Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
    Console.WriteLine(result.GetProperty("deviceState").ToString());
}
]]></code></example>
    </member>
    <member name="GetOperationStatusesAsync(string,int?,CancellationToken)">
      <example>
This sample shows how to call GetOperationStatusesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (DeviceOperation item in client.GetOperationStatusesAsync())
{
}
]]></code>
This sample shows how to call GetOperationStatusesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (DeviceOperation item in client.GetOperationStatusesAsync(filter: "<filter>", maxCount: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetOperationStatuses(string,int?,CancellationToken)">
      <example>
This sample shows how to call GetOperationStatuses.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (DeviceOperation item in client.GetOperationStatuses())
{
}
]]></code>
This sample shows how to call GetOperationStatuses with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (DeviceOperation item in client.GetOperationStatuses(filter: "<filter>", maxCount: 1234))
{
}
]]></code></example>
    </member>
    <member name="GetOperationStatusesAsync(string,int?,RequestContext)">
      <example>
This sample shows how to call GetOperationStatusesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetOperationStatusesAsync(null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetOperationStatusesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetOperationStatusesAsync("<filter>", 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("traceId").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code></example>
    </member>
    <member name="GetOperationStatuses(string,int?,RequestContext)">
      <example>
This sample shows how to call GetOperationStatuses and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetOperationStatuses(null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetOperationStatuses with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetOperationStatuses("<filter>", 1234, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("traceId").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code></example>
    </member>
    <member name="GetLogCollectionsAsync(CancellationToken)">
      <example>
This sample shows how to call GetLogCollectionsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (LogCollection item in client.GetLogCollectionsAsync())
{
}
]]></code>
This sample shows how to call GetLogCollectionsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (LogCollection item in client.GetLogCollectionsAsync())
{
}
]]></code></example>
    </member>
    <member name="GetLogCollections(CancellationToken)">
      <example>
This sample shows how to call GetLogCollections.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (LogCollection item in client.GetLogCollections())
{
}
]]></code>
This sample shows how to call GetLogCollections with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (LogCollection item in client.GetLogCollections())
{
}
]]></code></example>
    </member>
    <member name="GetLogCollectionsAsync(RequestContext)">
      <example>
This sample shows how to call GetLogCollectionsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetLogCollectionsAsync(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
}
]]></code>
This sample shows how to call GetLogCollectionsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetLogCollectionsAsync(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code></example>
    </member>
    <member name="GetLogCollections(RequestContext)">
      <example>
This sample shows how to call GetLogCollections and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetLogCollections(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
}
]]></code>
This sample shows how to call GetLogCollections with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetLogCollections(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code></example>
    </member>
    <member name="GetLogCollectionDetailedStatusAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetLogCollectionDetailedStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (LogCollectionOperationDetailedStatus item in client.GetLogCollectionDetailedStatusAsync("<operationId>"))
{
}
]]></code>
This sample shows how to call GetLogCollectionDetailedStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (LogCollectionOperationDetailedStatus item in client.GetLogCollectionDetailedStatusAsync("<operationId>"))
{
}
]]></code></example>
    </member>
    <member name="GetLogCollectionDetailedStatus(string,CancellationToken)">
      <example>
This sample shows how to call GetLogCollectionDetailedStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (LogCollectionOperationDetailedStatus item in client.GetLogCollectionDetailedStatus("<operationId>"))
{
}
]]></code>
This sample shows how to call GetLogCollectionDetailedStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (LogCollectionOperationDetailedStatus item in client.GetLogCollectionDetailedStatus("<operationId>"))
{
}
]]></code></example>
    </member>
    <member name="GetLogCollectionDetailedStatusAsync(string,RequestContext)">
      <example>
This sample shows how to call GetLogCollectionDetailedStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetLogCollectionDetailedStatusAsync("<operationId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetLogCollectionDetailedStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetLogCollectionDetailedStatusAsync("<operationId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("resultCode").ToString());
    Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("extendedResultCode").ToString());
    Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("logLocation").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
}
]]></code></example>
    </member>
    <member name="GetLogCollectionDetailedStatus(string,RequestContext)">
      <example>
This sample shows how to call GetLogCollectionDetailedStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetLogCollectionDetailedStatus("<operationId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetLogCollectionDetailedStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetLogCollectionDetailedStatus("<operationId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("resultCode").ToString());
    Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("extendedResultCode").ToString());
    Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("logLocation").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
}
]]></code></example>
    </member>
    <member name="GetHealthOfDevicesAsync(string,CancellationToken)">
      <example>
This sample shows how to call GetHealthOfDevicesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (DeviceHealth item in client.GetHealthOfDevicesAsync())
{
}
]]></code>
This sample shows how to call GetHealthOfDevicesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (DeviceHealth item in client.GetHealthOfDevicesAsync(filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetHealthOfDevices(string,CancellationToken)">
      <example>
This sample shows how to call GetHealthOfDevices.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (DeviceHealth item in client.GetHealthOfDevices())
{
}
]]></code>
This sample shows how to call GetHealthOfDevices with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (DeviceHealth item in client.GetHealthOfDevices(filter: "<filter>"))
{
}
]]></code></example>
    </member>
    <member name="GetHealthOfDevicesAsync(string,RequestContext)">
      <example>
This sample shows how to call GetHealthOfDevicesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetHealthOfDevicesAsync(null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].ToString());
}
]]></code>
This sample shows how to call GetHealthOfDevicesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (BinaryData item in client.GetHealthOfDevicesAsync("<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("digitalTwinModelId").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("result").ToString());
}
]]></code></example>
    </member>
    <member name="GetHealthOfDevices(string,RequestContext)">
      <example>
This sample shows how to call GetHealthOfDevices and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetHealthOfDevices(null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].ToString());
}
]]></code>
This sample shows how to call GetHealthOfDevices with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (BinaryData item in client.GetHealthOfDevices("<filter>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("digitalTwinModelId").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("result").ToString());
}
]]></code></example>
    </member>
    <member name="ImportDevicesAsync(WaitUntil,ImportType,CancellationToken)">
      <example>
This sample shows how to call ImportDevicesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Operation<DeviceOperation> operation = await client.ImportDevicesAsync(WaitUntil.Completed, ImportType.Devices);
DeviceOperation responseData = operation.Value;
]]></code>
This sample shows how to call ImportDevicesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Operation<DeviceOperation> operation = await client.ImportDevicesAsync(WaitUntil.Completed, ImportType.Devices);
DeviceOperation responseData = operation.Value;
]]></code></example>
    </member>
    <member name="ImportDevices(WaitUntil,ImportType,CancellationToken)">
      <example>
This sample shows how to call ImportDevices.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Operation<DeviceOperation> operation = client.ImportDevices(WaitUntil.Completed, ImportType.Devices);
DeviceOperation responseData = operation.Value;
]]></code>
This sample shows how to call ImportDevices with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Operation<DeviceOperation> operation = client.ImportDevices(WaitUntil.Completed, ImportType.Devices);
DeviceOperation responseData = operation.Value;
]]></code></example>
    </member>
    <member name="ImportDevicesAsync(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call ImportDevicesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create("Devices");
Operation<BinaryData> operation = await client.ImportDevicesAsync(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call ImportDevicesAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create("Devices");
Operation<BinaryData> operation = await client.ImportDevicesAsync(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("traceId").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code></example>
    </member>
    <member name="ImportDevices(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call ImportDevices and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create("Devices");
Operation<BinaryData> operation = client.ImportDevices(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call ImportDevices with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

using RequestContent content = RequestContent.Create("Devices");
Operation<BinaryData> operation = client.ImportDevices(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("traceId").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code></example>
    </member>
  </members>
</doc>