// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.IoT.DeviceUpdate
{
    /// <summary> Device health state. </summary>
    public readonly partial struct DeviceHealthState : IEquatable<DeviceHealthState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DeviceHealthState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DeviceHealthState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HealthyValue = "healthy";
        private const string UnhealthyValue = "unhealthy";

        /// <summary> Agent is healthy. </summary>
        public static DeviceHealthState Healthy { get; } = new DeviceHealthState(HealthyValue);
        /// <summary> Agent is in an unhealthy state. </summary>
        public static DeviceHealthState Unhealthy { get; } = new DeviceHealthState(UnhealthyValue);
        /// <summary> Determines if two <see cref="DeviceHealthState"/> values are the same. </summary>
        public static bool operator ==(DeviceHealthState left, DeviceHealthState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DeviceHealthState"/> values are not the same. </summary>
        public static bool operator !=(DeviceHealthState left, DeviceHealthState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DeviceHealthState"/>. </summary>
        public static implicit operator DeviceHealthState(string value) => new DeviceHealthState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DeviceHealthState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DeviceHealthState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
