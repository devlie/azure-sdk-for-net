// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.IoT.DeviceUpdate
{
    public partial class DeviceHealth
    {
        internal static DeviceHealth DeserializeDeviceHealth(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string deviceId = default;
            Optional<string> moduleId = default;
            DeviceHealthState state = default;
            Optional<string> digitalTwinModelId = default;
            IReadOnlyList<HealthCheck> healthChecks = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deviceId"u8))
                {
                    deviceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("moduleId"u8))
                {
                    moduleId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    state = new DeviceHealthState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("digitalTwinModelId"u8))
                {
                    digitalTwinModelId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("healthChecks"u8))
                {
                    List<HealthCheck> array = new List<HealthCheck>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HealthCheck.DeserializeHealthCheck(item));
                    }
                    healthChecks = array;
                    continue;
                }
            }
            return new DeviceHealth(deviceId, moduleId.Value, state, digitalTwinModelId.Value, healthChecks);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static DeviceHealth FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeDeviceHealth(document.RootElement);
        }
    }
}
