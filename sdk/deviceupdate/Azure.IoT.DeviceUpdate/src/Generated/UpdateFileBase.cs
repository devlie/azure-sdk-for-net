// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.IoT.DeviceUpdate
{
    /// <summary> Update file basic metadata. </summary>
    public partial class UpdateFileBase
    {
        /// <summary> Initializes a new instance of UpdateFileBase. </summary>
        /// <param name="fileName"> File name. </param>
        /// <param name="sizeInBytes"> File size in number of bytes. </param>
        /// <param name="hashes"> Mapping of hashing algorithm to base64 encoded hash values. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fileName"/> or <paramref name="hashes"/> is null. </exception>
        internal UpdateFileBase(string fileName, long sizeInBytes, IReadOnlyDictionary<string, string> hashes)
        {
            Argument.AssertNotNull(fileName, nameof(fileName));
            Argument.AssertNotNull(hashes, nameof(hashes));

            FileName = fileName;
            SizeInBytes = sizeInBytes;
            Hashes = hashes;
            Properties = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of UpdateFileBase. </summary>
        /// <param name="fileName"> File name. </param>
        /// <param name="sizeInBytes"> File size in number of bytes. </param>
        /// <param name="hashes"> Mapping of hashing algorithm to base64 encoded hash values. </param>
        /// <param name="mimeType"> File MIME type. </param>
        /// <param name="scanResult"> Anti-malware scan result. </param>
        /// <param name="scanDetails"> Anti-malware scan details. </param>
        /// <param name="properties"> Optional file properties (not consumed by service but pass-through to device). </param>
        internal UpdateFileBase(string fileName, long sizeInBytes, IReadOnlyDictionary<string, string> hashes, string mimeType, string scanResult, string scanDetails, IReadOnlyDictionary<string, string> properties)
        {
            FileName = fileName;
            SizeInBytes = sizeInBytes;
            Hashes = hashes;
            MimeType = mimeType;
            ScanResult = scanResult;
            ScanDetails = scanDetails;
            Properties = properties;
        }

        /// <summary> File name. </summary>
        public string FileName { get; }
        /// <summary> File size in number of bytes. </summary>
        public long SizeInBytes { get; }
        /// <summary> Mapping of hashing algorithm to base64 encoded hash values. </summary>
        public IReadOnlyDictionary<string, string> Hashes { get; }
        /// <summary> File MIME type. </summary>
        public string MimeType { get; }
        /// <summary> Anti-malware scan result. </summary>
        public string ScanResult { get; }
        /// <summary> Anti-malware scan details. </summary>
        public string ScanDetails { get; }
        /// <summary> Optional file properties (not consumed by service but pass-through to device). </summary>
        public IReadOnlyDictionary<string, string> Properties { get; }
    }
}
