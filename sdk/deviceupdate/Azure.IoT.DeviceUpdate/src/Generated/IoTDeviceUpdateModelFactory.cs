// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;

namespace Azure.IoT.DeviceUpdate
{
    /// <summary> Model factory for models. </summary>
    public static partial class IoTDeviceUpdateModelFactory
    {
        /// <summary> Initializes a new instance of Update. </summary>
        /// <param name="updateId"> Update identity. </param>
        /// <param name="description"> Update description specified by creator. </param>
        /// <param name="friendlyName"> Friendly update name specified by importer. </param>
        /// <param name="isDeployable"> Whether the update can be deployed to a device on its own. </param>
        /// <param name="updateType"> Update type. Deprecated in latest import manifest schema. </param>
        /// <param name="installedCriteria">
        /// String interpreted by Device Update client to determine if the update is
        /// installed on the device. Deprecated in latest import manifest schema.
        /// </param>
        /// <param name="compatibility"> List of update compatibility information. </param>
        /// <param name="instructions"> Update install instructions. </param>
        /// <param name="referencedBy"> List of update identities that reference this update. </param>
        /// <param name="scanResult"> Update aggregate scan result (calculated from payload file scan results). </param>
        /// <param name="manifestVersion"> Schema version of manifest used to import the update. </param>
        /// <param name="importedDateTime"> Date and time in UTC when the update was imported. </param>
        /// <param name="createdDateTime"> Date and time in UTC when the update was created. </param>
        /// <param name="etag"> Update ETag. </param>
        /// <returns> A new <see cref="DeviceUpdate.Update"/> instance for mocking. </returns>
        public static Update Update(UpdateId updateId = null, string description = null, string friendlyName = null, bool? isDeployable = null, string updateType = null, string installedCriteria = null, IEnumerable<IDictionary<string, string>> compatibility = null, Instructions instructions = null, IEnumerable<UpdateId> referencedBy = null, string scanResult = null, string manifestVersion = null, DateTimeOffset importedDateTime = default, DateTimeOffset createdDateTime = default, string etag = null)
        {
            compatibility ??= new List<IDictionary<string, string>>();
            referencedBy ??= new List<UpdateId>();

            return new Update(updateId, description, friendlyName, isDeployable, updateType, installedCriteria, compatibility?.ToList(), instructions, referencedBy?.ToList(), scanResult, manifestVersion, importedDateTime, createdDateTime, etag);
        }

        /// <summary> Initializes a new instance of Instructions. </summary>
        /// <param name="steps"> Collection of installation steps. </param>
        /// <returns> A new <see cref="DeviceUpdate.Instructions"/> instance for mocking. </returns>
        public static Instructions Instructions(IEnumerable<Step> steps = null)
        {
            steps ??= new List<Step>();

            return new Instructions(steps?.ToList());
        }

        /// <summary> Initializes a new instance of Step. </summary>
        /// <param name="type"> Step type. </param>
        /// <param name="description"> Step description. </param>
        /// <returns> A new <see cref="DeviceUpdate.Step"/> instance for mocking. </returns>
        public static Step Step(string type = "Unknown", string description = null)
        {
            return new UnknownStep(type, description);
        }

        /// <summary> Initializes a new instance of InlineStep. </summary>
        /// <param name="description"> Step description. </param>
        /// <param name="handler"> Identity of handler that will execute this step. Required if step type is inline. </param>
        /// <param name="handlerProperties"> Parameters to be passed to handler during execution. </param>
        /// <param name="files"> Collection of file names to be passed to handler during execution. </param>
        /// <returns> A new <see cref="DeviceUpdate.InlineStep"/> instance for mocking. </returns>
        public static InlineStep InlineStep(string description = null, string handler = null, IReadOnlyDictionary<string, BinaryData> handlerProperties = null, IEnumerable<string> files = null)
        {
            handlerProperties ??= new Dictionary<string, BinaryData>();
            files ??= new List<string>();

            return new InlineStep(StepType.Inline, description, handler, handlerProperties, files?.ToList());
        }

        /// <summary> Initializes a new instance of ReferenceStep. </summary>
        /// <param name="description"> Step description. </param>
        /// <param name="updateId"> Referenced child update identity. </param>
        /// <returns> A new <see cref="DeviceUpdate.ReferenceStep"/> instance for mocking. </returns>
        public static ReferenceStep ReferenceStep(string description = null, UpdateId updateId = null)
        {
            return new ReferenceStep(StepType.Reference, description, updateId);
        }

        /// <summary> Initializes a new instance of UpdateOperation. </summary>
        /// <param name="operationId"> Operation Id. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="update">
        /// The update being imported or deleted. For import, this property will only be
        /// populated after import manifest is processed successfully.
        /// </param>
        /// <param name="resourceLocation"> Location of the imported update when operation is successful. </param>
        /// <param name="error"> Operation error encountered, if any. </param>
        /// <param name="traceId">
        /// Operation correlation identity that can used by Microsoft Support for
        /// troubleshooting.
        /// </param>
        /// <param name="lastActionDateTime"> Date and time in UTC when the operation status was last updated. </param>
        /// <param name="createdDateTime"> Date and time in UTC when the operation was created. </param>
        /// <param name="etag"> Operation ETag. </param>
        /// <returns> A new <see cref="DeviceUpdate.UpdateOperation"/> instance for mocking. </returns>
        public static UpdateOperation UpdateOperation(string operationId = null, OperationStatus status = default, UpdateInfo update = null, string resourceLocation = null, ResponseError error = null, string traceId = null, DateTimeOffset lastActionDateTime = default, DateTimeOffset createdDateTime = default, string etag = null)
        {
            return new UpdateOperation(operationId, status, update, resourceLocation, error, traceId, lastActionDateTime, createdDateTime, etag);
        }

        /// <summary> Initializes a new instance of UpdateInfo. </summary>
        /// <param name="updateId"> Update identifier. </param>
        /// <param name="description"> Update description. </param>
        /// <param name="friendlyName"> Friendly update name. </param>
        /// <returns> A new <see cref="DeviceUpdate.UpdateInfo"/> instance for mocking. </returns>
        public static UpdateInfo UpdateInfo(UpdateId updateId = null, string description = null, string friendlyName = null)
        {
            return new UpdateInfo(updateId, description, friendlyName);
        }

        /// <summary> Initializes a new instance of UpdateFile. </summary>
        /// <param name="fileName"> File name. </param>
        /// <param name="sizeInBytes"> File size in number of bytes. </param>
        /// <param name="hashes"> Mapping of hashing algorithm to base64 encoded hash values. </param>
        /// <param name="mimeType"> File MIME type. </param>
        /// <param name="scanResult"> Anti-malware scan result. </param>
        /// <param name="scanDetails"> Anti-malware scan details. </param>
        /// <param name="properties"> Optional file properties (not consumed by service but pass-through to device). </param>
        /// <param name="fileId"> File identity, generated by server at import time. </param>
        /// <param name="relatedFiles">
        /// Optional related files metadata used together DownloadHandler metadata to
        /// download payload file.
        /// </param>
        /// <param name="downloadHandler"> Optional download handler for utilizing related files to download payload file. </param>
        /// <param name="etag"> File ETag. </param>
        /// <returns> A new <see cref="DeviceUpdate.UpdateFile"/> instance for mocking. </returns>
        public static UpdateFile UpdateFile(string fileName = null, long sizeInBytes = default, IReadOnlyDictionary<string, string> hashes = null, string mimeType = null, string scanResult = null, string scanDetails = null, IReadOnlyDictionary<string, string> properties = null, string fileId = null, IEnumerable<UpdateFileBase> relatedFiles = null, UpdateFileDownloadHandler downloadHandler = null, string etag = null)
        {
            hashes ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();
            relatedFiles ??= new List<UpdateFileBase>();

            return new UpdateFile(fileName, sizeInBytes, hashes, mimeType, scanResult, scanDetails, properties, fileId, relatedFiles?.ToList(), downloadHandler, etag);
        }

        /// <summary> Initializes a new instance of UpdateFileBase. </summary>
        /// <param name="fileName"> File name. </param>
        /// <param name="sizeInBytes"> File size in number of bytes. </param>
        /// <param name="hashes"> Mapping of hashing algorithm to base64 encoded hash values. </param>
        /// <param name="mimeType"> File MIME type. </param>
        /// <param name="scanResult"> Anti-malware scan result. </param>
        /// <param name="scanDetails"> Anti-malware scan details. </param>
        /// <param name="properties"> Optional file properties (not consumed by service but pass-through to device). </param>
        /// <returns> A new <see cref="DeviceUpdate.UpdateFileBase"/> instance for mocking. </returns>
        public static UpdateFileBase UpdateFileBase(string fileName = null, long sizeInBytes = default, IReadOnlyDictionary<string, string> hashes = null, string mimeType = null, string scanResult = null, string scanDetails = null, IReadOnlyDictionary<string, string> properties = null)
        {
            hashes ??= new Dictionary<string, string>();
            properties ??= new Dictionary<string, string>();

            return new UpdateFileBase(fileName, sizeInBytes, hashes, mimeType, scanResult, scanDetails, properties);
        }

        /// <summary> Initializes a new instance of UpdateFileDownloadHandler. </summary>
        /// <param name="id"> Download handler identifier. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <returns> A new <see cref="DeviceUpdate.UpdateFileDownloadHandler"/> instance for mocking. </returns>
        public static UpdateFileDownloadHandler UpdateFileDownloadHandler(string id = null)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            return new UpdateFileDownloadHandler(id);
        }

        /// <summary> Initializes a new instance of DeviceClass. </summary>
        /// <param name="deviceClassId">
        /// The device class identifier. This is generated from the model Id and the compat
        /// properties reported by the device update agent in the Device Update PnP
        /// interface in IoT Hub. It is a hex-encoded SHA1 hash.
        /// </param>
        /// <param name="friendlyName">
        /// The device class friendly name. This can be updated by callers after the device
        /// class has been automatically created.
        /// </param>
        /// <param name="deviceClassProperties"> The device class properties that are used to calculate the device class Id. </param>
        /// <param name="bestCompatibleUpdate"> Update that is the highest version compatible with this device class. </param>
        /// <returns> A new <see cref="DeviceUpdate.DeviceClass"/> instance for mocking. </returns>
        public static DeviceClass DeviceClass(string deviceClassId = null, string friendlyName = null, DeviceClassProperties deviceClassProperties = null, UpdateInfo bestCompatibleUpdate = null)
        {
            return new DeviceClass(deviceClassId, friendlyName, deviceClassProperties, bestCompatibleUpdate);
        }

        /// <summary> Initializes a new instance of DeviceClassProperties. </summary>
        /// <param name="contractModel"> The Device Update agent contract model. </param>
        /// <param name="compatProperties">
        /// The compat properties of the device class. This object can be thought of as a
        /// set of key-value pairs where the key is the name of the compatibility property
        /// and the value is the value of the compatibility property. There will always be
        /// at least 1 compat property
        /// </param>
        /// <returns> A new <see cref="DeviceUpdate.DeviceClassProperties"/> instance for mocking. </returns>
        public static DeviceClassProperties DeviceClassProperties(ContractModel contractModel = null, IReadOnlyDictionary<string, string> compatProperties = null)
        {
            compatProperties ??= new Dictionary<string, string>();

            return new DeviceClassProperties(contractModel, compatProperties);
        }

        /// <summary> Initializes a new instance of ContractModel. </summary>
        /// <param name="id">
        /// The Device Update agent contract model Id of the device class. This is also
        /// used to calculate the device class Id.
        /// </param>
        /// <param name="name">
        /// The Device Update agent contract model name of the device class. Intended to be
        /// a more readable form of the contract model Id.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> or <paramref name="name"/> is null. </exception>
        /// <returns> A new <see cref="DeviceUpdate.ContractModel"/> instance for mocking. </returns>
        public static ContractModel ContractModel(string id = null, string name = null)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }

            return new ContractModel(id, name);
        }

        /// <summary> Initializes a new instance of Device. </summary>
        /// <param name="deviceId"> Device identity. </param>
        /// <param name="moduleId"> Device module identity. </param>
        /// <param name="deviceClassId"> Device class identity. </param>
        /// <param name="groupId"> Device group identity. </param>
        /// <param name="lastAttemptedUpdate"> The update that device last attempted to install. </param>
        /// <param name="deploymentStatus"> State of the device in its last deployment. </param>
        /// <param name="installedUpdate"> Currently installed update on device. </param>
        /// <param name="onLatestUpdate">
        /// Boolean flag indicating whether the latest update (the best compatible update
        /// for the device's device class and group) is installed on the device
        /// </param>
        /// <param name="lastDeploymentId"> The deployment identifier for the last deployment to the device. </param>
        /// <param name="lastInstallResult"> Last install result. </param>
        /// <returns> A new <see cref="DeviceUpdate.Device"/> instance for mocking. </returns>
        public static Device Device(string deviceId = null, string moduleId = null, string deviceClassId = null, string groupId = null, UpdateInfo lastAttemptedUpdate = null, DeviceDeploymentState? deploymentStatus = null, UpdateInfo installedUpdate = null, bool onLatestUpdate = default, string lastDeploymentId = null, InstallResult lastInstallResult = null)
        {
            return new Device(deviceId, moduleId, deviceClassId, groupId, lastAttemptedUpdate, deploymentStatus, installedUpdate, onLatestUpdate, lastDeploymentId, lastInstallResult);
        }

        /// <summary> Initializes a new instance of InstallResult. </summary>
        /// <param name="resultCode"> Install result code. </param>
        /// <param name="extendedResultCode"> Install extended result code. </param>
        /// <param name="resultDetails"> A string containing further details about the install result. </param>
        /// <param name="stepResults"> Array of step results. </param>
        /// <returns> A new <see cref="DeviceUpdate.InstallResult"/> instance for mocking. </returns>
        public static InstallResult InstallResult(int resultCode = default, int extendedResultCode = default, string resultDetails = null, IEnumerable<StepResult> stepResults = null)
        {
            stepResults ??= new List<StepResult>();

            return new InstallResult(resultCode, extendedResultCode, resultDetails, stepResults?.ToList());
        }

        /// <summary> Initializes a new instance of StepResult. </summary>
        /// <param name="update"> The update that this step installs if it is of reference type. </param>
        /// <param name="description"> Step description. </param>
        /// <param name="resultCode"> Install result code. </param>
        /// <param name="extendedResultCode"> Install extended result code. </param>
        /// <param name="resultDetails"> A string containing further details about the install result. </param>
        /// <returns> A new <see cref="DeviceUpdate.StepResult"/> instance for mocking. </returns>
        public static StepResult StepResult(UpdateInfo update = null, string description = null, int resultCode = default, int extendedResultCode = default, string resultDetails = null)
        {
            return new StepResult(update, description, resultCode, extendedResultCode, resultDetails);
        }

        /// <summary> Initializes a new instance of DeviceOperation. </summary>
        /// <param name="operationId"> Operation Id. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="error"> Operation error encountered, if any. </param>
        /// <param name="traceId"> Operation correlation identity that can used by Microsoft Support for troubleshooting. </param>
        /// <param name="lastActionDateTime"> Date and time in UTC when the operation status was last updated. </param>
        /// <param name="createdDateTime"> Date and time in UTC when the operation was created. </param>
        /// <param name="etag"> Operation ETag. </param>
        /// <returns> A new <see cref="DeviceUpdate.DeviceOperation"/> instance for mocking. </returns>
        public static DeviceOperation DeviceOperation(string operationId = null, OperationStatus status = default, ResponseError error = null, string traceId = null, DateTimeOffset lastActionDateTime = default, DateTimeOffset createdDateTime = default, string etag = null)
        {
            return new DeviceOperation(operationId, status, error, traceId, lastActionDateTime, createdDateTime, etag);
        }

        /// <summary> Initializes a new instance of UpdateCompliance. </summary>
        /// <param name="totalDeviceCount"> Total number of devices. </param>
        /// <param name="onLatestUpdateDeviceCount"> Number of devices on the latest update. </param>
        /// <param name="newUpdatesAvailableDeviceCount"> Number of devices with a newer update available. </param>
        /// <param name="updatesInProgressDeviceCount"> Number of devices with update in-progress. </param>
        /// <returns> A new <see cref="DeviceUpdate.UpdateCompliance"/> instance for mocking. </returns>
        public static UpdateCompliance UpdateCompliance(int totalDeviceCount = default, int onLatestUpdateDeviceCount = default, int newUpdatesAvailableDeviceCount = default, int updatesInProgressDeviceCount = default)
        {
            return new UpdateCompliance(totalDeviceCount, onLatestUpdateDeviceCount, newUpdatesAvailableDeviceCount, updatesInProgressDeviceCount);
        }

        /// <summary> Initializes a new instance of Group. </summary>
        /// <param name="groupId">
        /// Group identity. This is created from the value of the ADUGroup tag in the Iot
        /// Hub's device/module twin or $default for devices with no tag.
        /// </param>
        /// <param name="groupType"> Group type. </param>
        /// <param name="createdDateTime"> Date and time when the update was created. </param>
        /// <param name="deviceCount"> The number of devices in the group. </param>
        /// <param name="subgroupsWithNewUpdatesAvailableCount"> The count of subgroups with new updates available. </param>
        /// <param name="subgroupsWithUpdatesInProgressCount"> The count of subgroups with updates in progress. </param>
        /// <param name="subgroupsWithOnLatestUpdateCount"> The count of subgroups with devices on the latest update. </param>
        /// <param name="deployments"> The active deployment Ids for the group. </param>
        /// <returns> A new <see cref="DeviceUpdate.Group"/> instance for mocking. </returns>
        public static Group Group(string groupId = null, GroupType groupType = default, string createdDateTime = null, int? deviceCount = null, int? subgroupsWithNewUpdatesAvailableCount = null, int? subgroupsWithUpdatesInProgressCount = null, int? subgroupsWithOnLatestUpdateCount = null, IEnumerable<string> deployments = null)
        {
            deployments ??= new List<string>();

            return new Group(groupId, groupType, createdDateTime, deviceCount, subgroupsWithNewUpdatesAvailableCount, subgroupsWithUpdatesInProgressCount, subgroupsWithOnLatestUpdateCount, deployments?.ToList());
        }

        /// <summary> Initializes a new instance of DeviceClassSubgroupUpdatableDevices. </summary>
        /// <param name="groupId"> The group Id. </param>
        /// <param name="deviceClassId"> The device class subgroup's device class Id. </param>
        /// <param name="update"> Update information. </param>
        /// <param name="deviceCount"> Total number of devices for which the update is applicable. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deviceClassId"/> or <paramref name="update"/> is null. </exception>
        /// <returns> A new <see cref="DeviceUpdate.DeviceClassSubgroupUpdatableDevices"/> instance for mocking. </returns>
        public static DeviceClassSubgroupUpdatableDevices DeviceClassSubgroupUpdatableDevices(string groupId = null, string deviceClassId = null, UpdateInfo update = null, int deviceCount = default)
        {
            if (groupId == null)
            {
                throw new ArgumentNullException(nameof(groupId));
            }
            if (deviceClassId == null)
            {
                throw new ArgumentNullException(nameof(deviceClassId));
            }
            if (update == null)
            {
                throw new ArgumentNullException(nameof(update));
            }

            return new DeviceClassSubgroupUpdatableDevices(groupId, deviceClassId, update, deviceCount);
        }

        /// <summary> Initializes a new instance of Deployment. </summary>
        /// <param name="deploymentId">
        /// The caller-provided deployment identifier. This cannot be longer than 73
        /// characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
        /// '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
        /// in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
        /// create a deployment.
        /// </param>
        /// <param name="startDateTime"> The deployment start datetime. </param>
        /// <param name="update"> Update information for the update in the deployment. </param>
        /// <param name="groupId"> The group identity for the devices the deployment is intended to update. </param>
        /// <param name="deviceClassSubgroups">
        /// The device class subgroups the deployment is compatible with and subgroup
        /// deployments have been created for. This is not provided by the caller during
        /// CreateOrUpdateDeployment but is automatically determined by Device Update
        /// </param>
        /// <param name="isCanceled"> Boolean flag indicating whether the deployment was canceled. </param>
        /// <param name="isRetried"> Boolean flag indicating whether the deployment has been retried. </param>
        /// <param name="rollbackPolicy"> The rollback policy for the deployment. </param>
        /// <param name="isCloudInitiatedRollback"> Boolean flag indicating whether the deployment is a rollback deployment. </param>
        /// <returns> A new <see cref="DeviceUpdate.Deployment"/> instance for mocking. </returns>
        public static Deployment Deployment(string deploymentId = null, DateTimeOffset startDateTime = default, UpdateInfo update = null, string groupId = null, IEnumerable<string> deviceClassSubgroups = null, bool? isCanceled = null, bool? isRetried = null, CloudInitiatedRollbackPolicy rollbackPolicy = null, bool? isCloudInitiatedRollback = null)
        {
            deviceClassSubgroups ??= new List<string>();

            return new Deployment(deploymentId, startDateTime, update, groupId, deviceClassSubgroups?.ToList(), isCanceled, isRetried, rollbackPolicy, isCloudInitiatedRollback);
        }

        /// <summary> Initializes a new instance of DeploymentStatus. </summary>
        /// <param name="groupId"> The group identity. </param>
        /// <param name="deploymentState"> The state of the deployment. </param>
        /// <param name="error">
        /// The error details of the Failed state.  This is not present if the deployment
        /// state is not Failed.
        /// </param>
        /// <param name="subgroupStatus"> The collection of device class subgroup status objects. </param>
        /// <returns> A new <see cref="DeviceUpdate.DeploymentStatus"/> instance for mocking. </returns>
        public static DeploymentStatus DeploymentStatus(string groupId = null, DeploymentState deploymentState = default, ResponseError error = null, IEnumerable<DeviceClassSubgroupDeploymentStatus> subgroupStatus = null)
        {
            subgroupStatus ??= new List<DeviceClassSubgroupDeploymentStatus>();

            return new DeploymentStatus(groupId, deploymentState, error, subgroupStatus?.ToList());
        }

        /// <summary> Initializes a new instance of DeviceClassSubgroupDeploymentStatus. </summary>
        /// <param name="groupId"> The group identity. </param>
        /// <param name="deviceClassId"> The device class subgroup identity. </param>
        /// <param name="deploymentState"> The state of the subgroup deployment. </param>
        /// <param name="error">
        /// The error details of the Failed state.  This is not present if the deployment
        /// state is not Failed.
        /// </param>
        /// <param name="totalDevices"> The total number of devices in the deployment. </param>
        /// <param name="devicesInProgressCount"> The number of devices that are currently in deployment. </param>
        /// <param name="devicesCompletedFailedCount"> The number of devices that have completed deployment with a failure. </param>
        /// <param name="devicesCompletedSucceededCount"> The number of devices which have successfully completed deployment. </param>
        /// <param name="devicesCanceledCount"> The number of devices which have had their deployment canceled. </param>
        /// <returns> A new <see cref="DeviceUpdate.DeviceClassSubgroupDeploymentStatus"/> instance for mocking. </returns>
        public static DeviceClassSubgroupDeploymentStatus DeviceClassSubgroupDeploymentStatus(string groupId = null, string deviceClassId = null, DeviceClassSubgroupDeploymentState deploymentState = default, ResponseError error = null, int? totalDevices = null, int? devicesInProgressCount = null, int? devicesCompletedFailedCount = null, int? devicesCompletedSucceededCount = null, int? devicesCanceledCount = null)
        {
            return new DeviceClassSubgroupDeploymentStatus(groupId, deviceClassId, deploymentState, error, totalDevices, devicesInProgressCount, devicesCompletedFailedCount, devicesCompletedSucceededCount, devicesCanceledCount);
        }

        /// <summary> Initializes a new instance of DeviceClassSubgroup. </summary>
        /// <param name="deviceClassId">
        /// Device class subgroup identity. This is generated from the model Id and the
        /// compat properties reported by the device update agent in the Device Update PnP
        /// interface in IoT Hub. It is a hex-encoded SHA1 hash.
        /// </param>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="createdDateTime"> Date and time when the device class subgroup was created. </param>
        /// <param name="deviceCount"> The number of devices in the device class subgroup. </param>
        /// <param name="deploymentId"> The active deployment Id for the device class subgroup. </param>
        /// <returns> A new <see cref="DeviceUpdate.DeviceClassSubgroup"/> instance for mocking. </returns>
        public static DeviceClassSubgroup DeviceClassSubgroup(string deviceClassId = null, string groupId = null, string createdDateTime = null, int? deviceCount = null, string deploymentId = null)
        {
            return new DeviceClassSubgroup(deviceClassId, groupId, createdDateTime, deviceCount, deploymentId);
        }

        /// <summary> Initializes a new instance of DeviceClassSubgroupDeployment. </summary>
        /// <param name="deploymentId">
        /// The caller-provided deployment identifier. This cannot be longer than 73
        /// characters, must be all lower-case, and cannot contain '&amp;', '^', '[', ']', '{',
        /// '}', '|', '&lt;', '&gt;', forward slash, backslash, or double quote. The Updates view
        /// in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you
        /// create a deployment.
        /// </param>
        /// <param name="startDateTime"> The deployment start datetime. </param>
        /// <param name="update"> Update information for the update in the deployment. </param>
        /// <param name="groupId"> The group identity for the devices the deployment is intended to update. </param>
        /// <param name="deviceClassSubgroups">
        /// The device class subgroups the deployment is compatible with and subgroup
        /// deployments have been created for. This is not provided by the caller during
        /// CreateOrUpdateDeployment but is automatically determined by Device Update
        /// </param>
        /// <param name="isCanceled"> Boolean flag indicating whether the deployment was canceled. </param>
        /// <param name="isRetried"> Boolean flag indicating whether the deployment has been retried. </param>
        /// <param name="rollbackPolicy"> The rollback policy for the deployment. </param>
        /// <param name="isCloudInitiatedRollback"> Boolean flag indicating whether the deployment is a rollback deployment. </param>
        /// <returns> A new <see cref="DeviceUpdate.DeviceClassSubgroupDeployment"/> instance for mocking. </returns>
        public static DeviceClassSubgroupDeployment DeviceClassSubgroupDeployment(string deploymentId = null, DateTimeOffset startDateTime = default, UpdateInfo update = null, string groupId = null, IEnumerable<string> deviceClassSubgroups = null, bool? isCanceled = null, bool? isRetried = null, CloudInitiatedRollbackPolicy rollbackPolicy = null, bool? isCloudInitiatedRollback = null)
        {
            deviceClassSubgroups ??= new List<string>();

            return new DeviceClassSubgroupDeployment(deploymentId, startDateTime, update, groupId, deviceClassSubgroups?.ToList(), isCanceled, isRetried, rollbackPolicy, isCloudInitiatedRollback);
        }

        /// <summary> Initializes a new instance of DeploymentDeviceState. </summary>
        /// <param name="deviceId"> Device identity. </param>
        /// <param name="moduleId"> Device module identity. </param>
        /// <param name="retryCount"> The number of times this deployment has been retried on this device. </param>
        /// <param name="movedOnToNewDeployment">
        /// Boolean flag indicating whether this device is in a newer deployment and can no
        /// longer retry this deployment.
        /// </param>
        /// <param name="deviceState"> Deployment device state. </param>
        /// <returns> A new <see cref="DeviceUpdate.DeploymentDeviceState"/> instance for mocking. </returns>
        public static DeploymentDeviceState DeploymentDeviceState(string deviceId = null, string moduleId = null, int retryCount = default, bool movedOnToNewDeployment = default, DeviceDeploymentState deviceState = default)
        {
            return new DeploymentDeviceState(deviceId, moduleId, retryCount, movedOnToNewDeployment, deviceState);
        }

        /// <summary> Initializes a new instance of LogCollection. </summary>
        /// <param name="operationId"> The log collection id. </param>
        /// <param name="deviceList"> Array of Device Update agent ids. </param>
        /// <param name="description"> Description of the diagnostics operation. </param>
        /// <param name="createdDateTime"> The timestamp when the operation was created. </param>
        /// <param name="lastActionDateTime"> A timestamp for when the current state was entered. </param>
        /// <param name="status"> Operation status. </param>
        /// <returns> A new <see cref="DeviceUpdate.LogCollection"/> instance for mocking. </returns>
        public static LogCollection LogCollection(string operationId = null, IEnumerable<DeviceUpdateAgentId> deviceList = null, string description = null, string createdDateTime = null, string lastActionDateTime = null, OperationStatus? status = null)
        {
            deviceList ??= new List<DeviceUpdateAgentId>();

            return new LogCollection(operationId, deviceList?.ToList(), description, createdDateTime, lastActionDateTime, status);
        }

        /// <summary> Initializes a new instance of LogCollectionOperationDetailedStatus. </summary>
        /// <param name="operationId"> The device diagnostics operation id. </param>
        /// <param name="createdDateTime"> The timestamp when the operation was created. </param>
        /// <param name="lastActionDateTime"> A timestamp for when the current state was entered. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="deviceStatus"> Status of the devices in the operation. </param>
        /// <param name="description"> Device diagnostics operation description. </param>
        /// <returns> A new <see cref="DeviceUpdate.LogCollectionOperationDetailedStatus"/> instance for mocking. </returns>
        public static LogCollectionOperationDetailedStatus LogCollectionOperationDetailedStatus(string operationId = null, string createdDateTime = null, string lastActionDateTime = null, OperationStatus? status = null, IEnumerable<LogCollectionOperationDeviceStatus> deviceStatus = null, string description = null)
        {
            deviceStatus ??= new List<LogCollectionOperationDeviceStatus>();

            return new LogCollectionOperationDetailedStatus(operationId, createdDateTime, lastActionDateTime, status, deviceStatus?.ToList(), description);
        }

        /// <summary> Initializes a new instance of LogCollectionOperationDeviceStatus. </summary>
        /// <param name="deviceId"> Device id. </param>
        /// <param name="moduleId"> Module id. </param>
        /// <param name="status"> Log upload status. </param>
        /// <param name="resultCode"> Log upload result code. </param>
        /// <param name="extendedResultCode"> Log upload extended result code. </param>
        /// <param name="logLocation"> Log upload location. </param>
        /// <returns> A new <see cref="DeviceUpdate.LogCollectionOperationDeviceStatus"/> instance for mocking. </returns>
        public static LogCollectionOperationDeviceStatus LogCollectionOperationDeviceStatus(string deviceId = null, string moduleId = null, OperationStatus status = default, string resultCode = null, string extendedResultCode = null, string logLocation = null)
        {
            return new LogCollectionOperationDeviceStatus(deviceId, moduleId, status, resultCode, extendedResultCode, logLocation);
        }

        /// <summary> Initializes a new instance of DeviceHealth. </summary>
        /// <param name="deviceId"> Device id. </param>
        /// <param name="moduleId"> Module id. </param>
        /// <param name="state"> Aggregate device health state. </param>
        /// <param name="digitalTwinModelId"> Digital twin model Id. </param>
        /// <param name="healthChecks"> Array of health checks and their results. </param>
        /// <returns> A new <see cref="DeviceUpdate.DeviceHealth"/> instance for mocking. </returns>
        public static DeviceHealth DeviceHealth(string deviceId = null, string moduleId = null, DeviceHealthState state = default, string digitalTwinModelId = null, IEnumerable<HealthCheck> healthChecks = null)
        {
            healthChecks ??= new List<HealthCheck>();

            return new DeviceHealth(deviceId, moduleId, state, digitalTwinModelId, healthChecks?.ToList());
        }

        /// <summary> Initializes a new instance of HealthCheck. </summary>
        /// <param name="name"> Health check name. </param>
        /// <param name="result"> Health check result. </param>
        /// <returns> A new <see cref="DeviceUpdate.HealthCheck"/> instance for mocking. </returns>
        public static HealthCheck HealthCheck(string name = null, HealthCheckResult? result = null)
        {
            return new HealthCheck(name, result);
        }

        /// <summary> Initializes a new instance of Limits. </summary>
        /// <param name="counters"> The list of current counts of each limited resource and the maximum quota that are allowed. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="counters"/> is null. </exception>
        /// <returns> A new <see cref="DeviceUpdate.Limits"/> instance for mocking. </returns>
        public static Limits Limits(Counters counters = null)
        {
            if (counters == null)
            {
                throw new ArgumentNullException(nameof(counters));
            }

            return new Limits(counters);
        }

        /// <summary> Initializes a new instance of Counters. </summary>
        /// <param name="deviceCount"> The current usage and quota of devices. </param>
        /// <param name="deviceClassCount"> The current usage and quota of device classes. </param>
        /// <param name="deviceGroupCount"> The current usage and quota of device groups. </param>
        /// <param name="activeDeploymentCount"> The current usage and quota of active deployments. </param>
        /// <param name="deploymentCount"> The current usage and quota of deployments. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceCount"/>, <paramref name="deviceClassCount"/>, <paramref name="deviceGroupCount"/>, <paramref name="activeDeploymentCount"/> or <paramref name="deploymentCount"/> is null. </exception>
        /// <returns> A new <see cref="DeviceUpdate.Counters"/> instance for mocking. </returns>
        public static Counters Counters(UsageQuotaCounter deviceCount = null, UsageQuotaCounter deviceClassCount = null, UsageQuotaCounter deviceGroupCount = null, UsageQuotaCounter activeDeploymentCount = null, UsageQuotaCounter deploymentCount = null)
        {
            if (deviceCount == null)
            {
                throw new ArgumentNullException(nameof(deviceCount));
            }
            if (deviceClassCount == null)
            {
                throw new ArgumentNullException(nameof(deviceClassCount));
            }
            if (deviceGroupCount == null)
            {
                throw new ArgumentNullException(nameof(deviceGroupCount));
            }
            if (activeDeploymentCount == null)
            {
                throw new ArgumentNullException(nameof(activeDeploymentCount));
            }
            if (deploymentCount == null)
            {
                throw new ArgumentNullException(nameof(deploymentCount));
            }

            return new Counters(deviceCount, deviceClassCount, deviceGroupCount, activeDeploymentCount, deploymentCount);
        }

        /// <summary> Initializes a new instance of UsageQuotaCounter. </summary>
        /// <param name="usage"> The current number of the resource that exist. </param>
        /// <param name="quota"> The maximum number of the resource that can be created. </param>
        /// <returns> A new <see cref="DeviceUpdate.UsageQuotaCounter"/> instance for mocking. </returns>
        public static UsageQuotaCounter UsageQuotaCounter(int usage = default, int quota = default)
        {
            return new UsageQuotaCounter(usage, quota);
        }
    }
}
