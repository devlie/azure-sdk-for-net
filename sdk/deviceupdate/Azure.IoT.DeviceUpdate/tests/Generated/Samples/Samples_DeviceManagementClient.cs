// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.IoT.DeviceUpdate;
using NUnit.Framework;

namespace Azure.IoT.DeviceUpdate.Samples
{
    public partial class Samples_DeviceManagementClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClass_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClass("<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClass_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassAsync("<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClass_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClass> response = client.GetDeviceClass("<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClass_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClass> response = await client.GetDeviceClassAsync("<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClass_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClass("<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClass_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassAsync("<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClass_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClass> response = client.GetDeviceClass("<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClass_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClass> response = await client.GetDeviceClassAsync("<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateDeviceClass_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateDeviceClass("<deviceClassId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateDeviceClass_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateDeviceClassAsync("<deviceClassId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateDeviceClass_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                friendlyName = "<friendlyName>",
            });
            Response response = client.UpdateDeviceClass("<deviceClassId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateDeviceClass_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                friendlyName = "<friendlyName>",
            });
            Response response = await client.UpdateDeviceClassAsync("<deviceClassId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeviceClass_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeviceClass("<deviceClassId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeviceClass_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeviceClassAsync("<deviceClassId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeviceClass_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeviceClass("<deviceClassId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeviceClass_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeviceClassAsync("<deviceClassId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevice_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDevice("<deviceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevice_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceAsync("<deviceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevice_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Device> response = client.GetDevice("<deviceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevice_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Device> response = await client.GetDeviceAsync("<deviceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevice_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDevice("<deviceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
            Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevice_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceAsync("<deviceId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
            Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevice_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Device> response = client.GetDevice("<deviceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevice_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Device> response = await client.GetDeviceAsync("<deviceId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceModule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceModule("<deviceId>", "<moduleId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceModule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceModule_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Device> response = client.GetDeviceModule("<deviceId>", "<moduleId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceModule_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Device> response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceModule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceModule("<deviceId>", "<moduleId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
            Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceModule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
            Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceModule_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Device> response = client.GetDeviceModule("<deviceId>", "<moduleId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceModule_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Device> response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpdateCompliance_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetUpdateCompliance(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpdateCompliance_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetUpdateComplianceAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpdateCompliance_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<UpdateCompliance> response = client.GetUpdateCompliance();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpdateCompliance_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<UpdateCompliance> response = await client.GetUpdateComplianceAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpdateCompliance_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetUpdateCompliance(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpdateCompliance_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetUpdateComplianceAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpdateCompliance_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<UpdateCompliance> response = client.GetUpdateCompliance();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpdateCompliance_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<UpdateCompliance> response = await client.GetUpdateComplianceAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetGroup("<groupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupType").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetGroupAsync("<groupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupType").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Group> response = client.GetGroup("<groupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Group> response = await client.GetGroupAsync("<groupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetGroup("<groupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupType").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
            Console.WriteLine(result.GetProperty("deployments")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetGroupAsync("<groupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupType").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
            Console.WriteLine(result.GetProperty("deployments")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Group> response = client.GetGroup("<groupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Group> response = await client.GetGroupAsync("<groupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteGroup("<groupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteGroupAsync("<groupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteGroup("<groupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteGroupAsync("<groupId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpdateComplianceForGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetUpdateComplianceForGroup("<groupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpdateComplianceForGroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetUpdateComplianceForGroupAsync("<groupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpdateComplianceForGroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<UpdateCompliance> response = client.GetUpdateComplianceForGroup("<groupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpdateComplianceForGroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<UpdateCompliance> response = await client.GetUpdateComplianceForGroupAsync("<groupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpdateComplianceForGroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetUpdateComplianceForGroup("<groupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpdateComplianceForGroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetUpdateComplianceForGroupAsync("<groupId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpdateComplianceForGroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<UpdateCompliance> response = client.GetUpdateComplianceForGroup("<groupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpdateComplianceForGroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<UpdateCompliance> response = await client.GetUpdateComplianceForGroupAsync("<groupId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeployment("<groupId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeployment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeployment_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Deployment> response = client.GetDeployment("<groupId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeployment_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Deployment> response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeployment("<groupId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeployment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeployment_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Deployment> response = client.GetDeployment("<groupId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeployment_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<Deployment> response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                deploymentId = "<deploymentId>",
                startDateTime = "2022-05-10T14:57:31.2311892-04:00",
                update = new object(),
                groupId = "<groupId>",
            });
            Response response = client.CreateOrUpdateDeployment("<groupId>", "<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateDeployment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                deploymentId = "<deploymentId>",
                startDateTime = "2022-05-10T14:57:31.2311892-04:00",
                update = new object(),
                groupId = "<groupId>",
            });
            Response response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateDeployment_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Deployment resource = new Deployment("<deploymentId>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new UpdateInfo(), "<groupId>");
            Response<Deployment> response = client.CreateOrUpdateDeployment("<groupId>", "<deploymentId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateDeployment_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Deployment resource = new Deployment("<deploymentId>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new UpdateInfo(), "<groupId>");
            Response<Deployment> response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                deploymentId = "<deploymentId>",
                startDateTime = "2022-05-10T14:57:31.2311892-04:00",
                update = new object(),
                groupId = "<groupId>",
                rollbackPolicy = new
                {
                    failure = new
                    {
                        devicesFailedPercentage = 1234,
                        devicesFailedCount = 1234,
                    },
                },
            });
            Response response = client.CreateOrUpdateDeployment("<groupId>", "<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateDeployment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                deploymentId = "<deploymentId>",
                startDateTime = "2022-05-10T14:57:31.2311892-04:00",
                update = new object(),
                groupId = "<groupId>",
                rollbackPolicy = new
                {
                    failure = new
                    {
                        devicesFailedPercentage = 1234,
                        devicesFailedCount = 1234,
                    },
                },
            });
            Response response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateDeployment_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Deployment resource = new Deployment("<deploymentId>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new UpdateInfo(), "<groupId>")
            {
                RollbackPolicy = new CloudInitiatedRollbackPolicy(default, new CloudInitiatedRollbackPolicyFailure(1234, 1234)),
            };
            Response<Deployment> response = client.CreateOrUpdateDeployment("<groupId>", "<deploymentId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateDeployment_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Deployment resource = new Deployment("<deploymentId>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), new UpdateInfo(), "<groupId>")
            {
                RollbackPolicy = new CloudInitiatedRollbackPolicy(default, new CloudInitiatedRollbackPolicyFailure(1234, 1234)),
            };
            Response<Deployment> response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeployment("<groupId>", "<deploymentId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeployment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeploymentAsync("<groupId>", "<deploymentId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeployment("<groupId>", "<deploymentId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeployment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeploymentAsync("<groupId>", "<deploymentId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeploymentStatus("<groupId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeploymentStatus> response = client.GetDeploymentStatus("<groupId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeploymentStatus> response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeploymentStatus("<groupId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("totalDevices").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesInProgressCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedFailedCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedSucceededCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCanceledCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("totalDevices").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesInProgressCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedFailedCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedSucceededCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCanceledCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeploymentStatus> response = client.GetDeploymentStatus("<groupId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeploymentStatus> response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClassSubgroup("<groupId>", "<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroup> response = client.GetDeviceClassSubgroup("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroup> response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClassSubgroup("<groupId>", "<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroup> response = client.GetDeviceClassSubgroup("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroup> response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeviceClassSubgroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeviceClassSubgroup("<groupId>", "<deviceClassId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeviceClassSubgroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeviceClassSubgroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeviceClassSubgroup("<groupId>", "<deviceClassId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeviceClassSubgroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupUpdateCompliance_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClassSubgroupUpdateCompliance("<groupId>", "<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupUpdateCompliance_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupUpdateCompliance_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<UpdateCompliance> response = client.GetDeviceClassSubgroupUpdateCompliance("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupUpdateCompliance_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<UpdateCompliance> response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupUpdateCompliance_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClassSubgroupUpdateCompliance("<groupId>", "<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupUpdateCompliance_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupUpdateCompliance_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<UpdateCompliance> response = client.GetDeviceClassSubgroupUpdateCompliance("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupUpdateCompliance_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<UpdateCompliance> response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBestUpdatesForDeviceClassSubgroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetBestUpdatesForDeviceClassSubgroup("<groupId>", "<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBestUpdatesForDeviceClassSubgroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBestUpdatesForDeviceClassSubgroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupUpdatableDevices> response = client.GetBestUpdatesForDeviceClassSubgroup("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBestUpdatesForDeviceClassSubgroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupUpdatableDevices> response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBestUpdatesForDeviceClassSubgroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetBestUpdatesForDeviceClassSubgroup("<groupId>", "<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBestUpdatesForDeviceClassSubgroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBestUpdatesForDeviceClassSubgroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupUpdatableDevices> response = client.GetBestUpdatesForDeviceClassSubgroup("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBestUpdatesForDeviceClassSubgroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupUpdatableDevices> response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentForDeviceClassSubgroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentForDeviceClassSubgroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentForDeviceClassSubgroup_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeployment> response = client.GetDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentForDeviceClassSubgroup_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeployment> response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentForDeviceClassSubgroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentForDeviceClassSubgroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentForDeviceClassSubgroup_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeployment> response = client.GetDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentForDeviceClassSubgroup_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeployment> response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeploymentForDeviceClassSubgroup_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeploymentForDeviceClassSubgroup_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeploymentForDeviceClassSubgroup_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeploymentForDeviceClassSubgroup_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.StopDeployment("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDeployment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDeployment_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeployment> response = client.StopDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDeployment_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeployment> response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.StopDeployment("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDeployment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDeployment_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeployment> response = client.StopDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDeployment_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeployment> response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetryDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.RetryDeployment("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetryDeployment_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetryDeployment_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeployment> response = client.RetryDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetryDeployment_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeployment> response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetryDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.RetryDeployment("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetryDeployment_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetryDeployment_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeployment> response = client.RetryDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetryDeployment_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeployment> response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupDeploymentStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClassSubgroupDeploymentStatus("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupDeploymentStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupDeploymentStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeploymentStatus> response = client.GetDeviceClassSubgroupDeploymentStatus("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupDeploymentStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeploymentStatus> response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupDeploymentStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClassSubgroupDeploymentStatus("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("totalDevices").ToString());
            Console.WriteLine(result.GetProperty("devicesInProgressCount").ToString());
            Console.WriteLine(result.GetProperty("devicesCompletedFailedCount").ToString());
            Console.WriteLine(result.GetProperty("devicesCompletedSucceededCount").ToString());
            Console.WriteLine(result.GetProperty("devicesCanceledCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupDeploymentStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("totalDevices").ToString());
            Console.WriteLine(result.GetProperty("devicesInProgressCount").ToString());
            Console.WriteLine(result.GetProperty("devicesCompletedFailedCount").ToString());
            Console.WriteLine(result.GetProperty("devicesCompletedSucceededCount").ToString());
            Console.WriteLine(result.GetProperty("devicesCanceledCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupDeploymentStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeploymentStatus> response = client.GetDeviceClassSubgroupDeploymentStatus("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupDeploymentStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<DeviceClassSubgroupDeploymentStatus> response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollection_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetLogCollection("<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollection_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetLogCollectionAsync("<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollection_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<LogCollection> response = client.GetLogCollection("<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollection_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<LogCollection> response = await client.GetLogCollectionAsync("<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollection_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetLogCollection("<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollection_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetLogCollectionAsync("<operationId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollection_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<LogCollection> response = client.GetLogCollection("<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollection_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response<LogCollection> response = await client.GetLogCollectionAsync("<operationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartLogCollection_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                operationId = "<operationId>",
                deviceList = new object[]
            {
new
{
deviceId = "<deviceId>",
}
            },
            });
            Response response = client.StartLogCollection("<operationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartLogCollection_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                operationId = "<operationId>",
                deviceList = new object[]
            {
new
{
deviceId = "<deviceId>",
}
            },
            });
            Response response = await client.StartLogCollectionAsync("<operationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartLogCollection_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            LogCollection resource = new LogCollection("<operationId>", new DeviceUpdateAgentId[]
            {
new DeviceUpdateAgentId("<deviceId>")
            });
            Response<LogCollection> response = client.StartLogCollection("<operationId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartLogCollection_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            LogCollection resource = new LogCollection("<operationId>", new DeviceUpdateAgentId[]
            {
new DeviceUpdateAgentId("<deviceId>")
            });
            Response<LogCollection> response = await client.StartLogCollectionAsync("<operationId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartLogCollection_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                operationId = "<operationId>",
                deviceList = new object[]
            {
new
{
deviceId = "<deviceId>",
moduleId = "<moduleId>",
}
            },
                description = "<description>",
            });
            Response response = client.StartLogCollection("<operationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartLogCollection_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                operationId = "<operationId>",
                deviceList = new object[]
            {
new
{
deviceId = "<deviceId>",
moduleId = "<moduleId>",
}
            },
                description = "<description>",
            });
            Response response = await client.StartLogCollectionAsync("<operationId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartLogCollection_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            LogCollection resource = new LogCollection("<operationId>", new DeviceUpdateAgentId[]
            {
new DeviceUpdateAgentId("<deviceId>")
{
ModuleId = "<moduleId>",
}
            })
            {
                Description = "<description>",
            };
            Response<LogCollection> response = client.StartLogCollection("<operationId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartLogCollection_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            LogCollection resource = new LogCollection("<operationId>", new DeviceUpdateAgentId[]
            {
new DeviceUpdateAgentId("<deviceId>")
{
ModuleId = "<moduleId>",
}
            })
            {
                Description = "<description>",
            };
            Response<LogCollection> response = await client.StartLogCollectionAsync("<operationId>", resource);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClasses_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetDeviceClasses(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClasses_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetDeviceClassesAsync(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClasses_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (DeviceClass item in client.GetDeviceClasses())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClasses_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (DeviceClass item in client.GetDeviceClassesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClasses_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetDeviceClasses("<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClasses_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetDeviceClassesAsync("<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClasses_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (DeviceClass item in client.GetDeviceClasses(filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClasses_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (DeviceClass item in client.GetDeviceClassesAsync(filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetInstallableUpdatesForDeviceClasses_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetInstallableUpdatesForDeviceClasses("<deviceClassId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInstallableUpdatesForDeviceClasses_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetInstallableUpdatesForDeviceClasses_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (UpdateInfo item in client.GetInstallableUpdatesForDeviceClasses("<deviceClassId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInstallableUpdatesForDeviceClasses_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (UpdateInfo item in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetInstallableUpdatesForDeviceClasses_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetInstallableUpdatesForDeviceClasses("<deviceClassId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("friendlyName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInstallableUpdatesForDeviceClasses_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("friendlyName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetInstallableUpdatesForDeviceClasses_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (UpdateInfo item in client.GetInstallableUpdatesForDeviceClasses("<deviceClassId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInstallableUpdatesForDeviceClasses_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (UpdateInfo item in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevices_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetDevices(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevices_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetDevicesAsync(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevices_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (Device item in client.GetDevices())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevices_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (Device item in client.GetDevicesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevices_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetDevices("<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
                Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevices_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetDevicesAsync("<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
                Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevices_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (Device item in client.GetDevices(filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevices_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (Device item in client.GetDevicesAsync(filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetGroups(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupType").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetGroupsAsync(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupType").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (Group item in client.GetGroups())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (Group item in client.GetGroupsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetGroups("<orderby>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupType").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
                Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
                Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
                Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
                Console.WriteLine(result.GetProperty("deployments")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetGroupsAsync("<orderby>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupType").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
                Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
                Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
                Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
                Console.WriteLine(result.GetProperty("deployments")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (Group item in client.GetGroups(orderby: "<orderby>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (Group item in client.GetGroupsAsync(orderby: "<orderby>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBestUpdatesForGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetBestUpdatesForGroups("<groupId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBestUpdatesForGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetBestUpdatesForGroupsAsync("<groupId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBestUpdatesForGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (DeviceClassSubgroupUpdatableDevices item in client.GetBestUpdatesForGroups("<groupId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBestUpdatesForGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (DeviceClassSubgroupUpdatableDevices item in client.GetBestUpdatesForGroupsAsync("<groupId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBestUpdatesForGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetBestUpdatesForGroups("<groupId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBestUpdatesForGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetBestUpdatesForGroupsAsync("<groupId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBestUpdatesForGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (DeviceClassSubgroupUpdatableDevices item in client.GetBestUpdatesForGroups("<groupId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBestUpdatesForGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (DeviceClassSubgroupUpdatableDevices item in client.GetBestUpdatesForGroupsAsync("<groupId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentsForGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetDeploymentsForGroups("<groupId>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentsForGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetDeploymentsForGroupsAsync("<groupId>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentsForGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (Deployment item in client.GetDeploymentsForGroups("<groupId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentsForGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (Deployment item in client.GetDeploymentsForGroupsAsync("<groupId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentsForGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetDeploymentsForGroups("<groupId>", "<orderby>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
                Console.WriteLine(result.GetProperty("isCanceled").ToString());
                Console.WriteLine(result.GetProperty("isRetried").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
                Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentsForGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetDeploymentsForGroupsAsync("<groupId>", "<orderby>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
                Console.WriteLine(result.GetProperty("isCanceled").ToString());
                Console.WriteLine(result.GetProperty("isRetried").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
                Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentsForGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (Deployment item in client.GetDeploymentsForGroups("<groupId>", orderby: "<orderby>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentsForGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (Deployment item in client.GetDeploymentsForGroupsAsync("<groupId>", orderby: "<orderby>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupsForGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetDeviceClassSubgroupsForGroups("<groupId>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupsForGroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupsForGroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (DeviceClassSubgroup item in client.GetDeviceClassSubgroupsForGroups("<groupId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupsForGroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (DeviceClassSubgroup item in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupsForGroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetDeviceClassSubgroupsForGroups("<groupId>", "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupsForGroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>", "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupsForGroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (DeviceClassSubgroup item in client.GetDeviceClassSubgroupsForGroups("<groupId>", filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupsForGroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (DeviceClassSubgroup item in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>", filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentsForDeviceClassSubgroups_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetDeploymentsForDeviceClassSubgroups("<groupId>", "<deviceClassId>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentsForDeviceClassSubgroups_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentsForDeviceClassSubgroups_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (DeviceClassSubgroupDeployment item in client.GetDeploymentsForDeviceClassSubgroups("<groupId>", "<deviceClassId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentsForDeviceClassSubgroups_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (DeviceClassSubgroupDeployment item in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentsForDeviceClassSubgroups_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetDeploymentsForDeviceClassSubgroups("<groupId>", "<deviceClassId>", "<orderby>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
                Console.WriteLine(result.GetProperty("isCanceled").ToString());
                Console.WriteLine(result.GetProperty("isRetried").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
                Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentsForDeviceClassSubgroups_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>", "<orderby>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
                Console.WriteLine(result.GetProperty("isCanceled").ToString());
                Console.WriteLine(result.GetProperty("isRetried").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
                Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentsForDeviceClassSubgroups_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (DeviceClassSubgroupDeployment item in client.GetDeploymentsForDeviceClassSubgroups("<groupId>", "<deviceClassId>", orderby: "<orderby>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentsForDeviceClassSubgroups_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (DeviceClassSubgroupDeployment item in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>", orderby: "<orderby>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceStatesForDeviceClassSubgroupDeployments_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetDeviceStatesForDeviceClassSubgroupDeployments("<groupId>", "<deviceClassId>", "<deploymentId>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
                Console.WriteLine(result.GetProperty("deviceState").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceStatesForDeviceClassSubgroupDeployments_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
                Console.WriteLine(result.GetProperty("deviceState").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceStatesForDeviceClassSubgroupDeployments_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (DeploymentDeviceState item in client.GetDeviceStatesForDeviceClassSubgroupDeployments("<groupId>", "<deviceClassId>", "<deploymentId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceStatesForDeviceClassSubgroupDeployments_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (DeploymentDeviceState item in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceStatesForDeviceClassSubgroupDeployments_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetDeviceStatesForDeviceClassSubgroupDeployments("<groupId>", "<deviceClassId>", "<deploymentId>", "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
                Console.WriteLine(result.GetProperty("deviceState").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceStatesForDeviceClassSubgroupDeployments_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>", "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
                Console.WriteLine(result.GetProperty("deviceState").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceStatesForDeviceClassSubgroupDeployments_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (DeploymentDeviceState item in client.GetDeviceStatesForDeviceClassSubgroupDeployments("<groupId>", "<deviceClassId>", "<deploymentId>", filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceStatesForDeviceClassSubgroupDeployments_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (DeploymentDeviceState item in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>", filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOperationStatuses_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetOperationStatuses(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOperationStatuses_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetOperationStatusesAsync(null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOperationStatuses_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (DeviceOperation item in client.GetOperationStatuses())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOperationStatuses_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (DeviceOperation item in client.GetOperationStatusesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOperationStatuses_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetOperationStatuses("<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("traceId").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOperationStatuses_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetOperationStatusesAsync("<filter>", 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("traceId").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOperationStatuses_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (DeviceOperation item in client.GetOperationStatuses(filter: "<filter>", maxCount: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOperationStatuses_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (DeviceOperation item in client.GetOperationStatusesAsync(filter: "<filter>", maxCount: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollections_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetLogCollections(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollections_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetLogCollectionsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollections_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (LogCollection item in client.GetLogCollections())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollections_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (LogCollection item in client.GetLogCollectionsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollections_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetLogCollections(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollections_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetLogCollectionsAsync(null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollections_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (LogCollection item in client.GetLogCollections())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollections_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (LogCollection item in client.GetLogCollectionsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollectionDetailedStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetLogCollectionDetailedStatus("<operationId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollectionDetailedStatus_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetLogCollectionDetailedStatusAsync("<operationId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollectionDetailedStatus_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (LogCollectionOperationDetailedStatus item in client.GetLogCollectionDetailedStatus("<operationId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollectionDetailedStatus_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (LogCollectionOperationDetailedStatus item in client.GetLogCollectionDetailedStatusAsync("<operationId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollectionDetailedStatus_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetLogCollectionDetailedStatus("<operationId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("resultCode").ToString());
                Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("extendedResultCode").ToString());
                Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("logLocation").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollectionDetailedStatus_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetLogCollectionDetailedStatusAsync("<operationId>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("resultCode").ToString());
                Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("extendedResultCode").ToString());
                Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("logLocation").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollectionDetailedStatus_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (LogCollectionOperationDetailedStatus item in client.GetLogCollectionDetailedStatus("<operationId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollectionDetailedStatus_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (LogCollectionOperationDetailedStatus item in client.GetLogCollectionDetailedStatusAsync("<operationId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetHealthOfDevices_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetHealthOfDevices(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("healthChecks")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetHealthOfDevices_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetHealthOfDevicesAsync(null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("healthChecks")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetHealthOfDevices_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (DeviceHealth item in client.GetHealthOfDevices())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetHealthOfDevices_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (DeviceHealth item in client.GetHealthOfDevicesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetHealthOfDevices_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (BinaryData item in client.GetHealthOfDevices("<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("digitalTwinModelId").ToString());
                Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("result").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetHealthOfDevices_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (BinaryData item in client.GetHealthOfDevicesAsync("<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("digitalTwinModelId").ToString());
                Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("result").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetHealthOfDevices_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (DeviceHealth item in client.GetHealthOfDevices(filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetHealthOfDevices_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (DeviceHealth item in client.GetHealthOfDevicesAsync(filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ImportDevices_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create("Devices");
            Operation<BinaryData> operation = client.ImportDevices(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ImportDevices_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create("Devices");
            Operation<BinaryData> operation = await client.ImportDevicesAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ImportDevices_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Operation<DeviceOperation> operation = client.ImportDevices(WaitUntil.Completed, ImportType.Devices);
            DeviceOperation responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ImportDevices_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Operation<DeviceOperation> operation = await client.ImportDevicesAsync(WaitUntil.Completed, ImportType.Devices);
            DeviceOperation responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ImportDevices_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create("Devices");
            Operation<BinaryData> operation = client.ImportDevices(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("traceId").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ImportDevices_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            using RequestContent content = RequestContent.Create("Devices");
            Operation<BinaryData> operation = await client.ImportDevicesAsync(WaitUntil.Completed, content);
            BinaryData responseData = operation.Value;

            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("traceId").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ImportDevices_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Operation<DeviceOperation> operation = client.ImportDevices(WaitUntil.Completed, ImportType.Devices);
            DeviceOperation responseData = operation.Value;
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ImportDevices_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Operation<DeviceOperation> operation = await client.ImportDevicesAsync(WaitUntil.Completed, ImportType.Devices);
            DeviceOperation responseData = operation.Value;
        }
    }
}
